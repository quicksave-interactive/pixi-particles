{"version":3,"sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/PolygonalChain.ts","../src/Emitter.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts","../src/LinkedListContainer.ts"],"names":["PropertyNode","value","time","ease","this","next","isStepped","ParticleUtils","generateEase","createList","data","array","list","node","_a","first","hexToRGB","length","i","_b","value_1","time_1","start","end","TextureFromString","Texture","from","GetTextureFromString","s","verbose","DEG_TO_RADS","Math","PI","rotatePoint","angle","p","sin","c","cos","xnew","x","y","ynew","combineRGBComponents","r","g","b","normalize","point","oneOverLen","scaleBy","sqrt","color","output","alpha","charAt","substr","indexOf","parseInt","a","segments","qty","oneOverQty","t","cp","e","getBlendMode","name","BLEND_MODES","NORMAL","toUpperCase","replace","createSteppedGradient","numSteps","currentNode","current","nextIndex","lerp","curVal","nextVal","intValueSimple","intColorSimple","intValueComplex","intColorComplex","intValueStepped","intColorStepped","PropertyList","isColor","interpolate","prototype","reset","Particle","emitter","_this","_super","call","prevChild","nextChild","anchor","velocity","Point","rotationSpeed","rotationAcceleration","maxLife","age","extraData","alphaList","speedList","speedMultiplier","acceleration","maxSpeed","NaN","scaleList","scaleMultiplier","colorList","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","prev","init","Particle_init","update","Particle_update","Sprite_destroy","destroy","Particle_destroy","applyArt","kill","__extends","rotation","noRotation","scale","tint","visible","art","texture","EMPTY","delta","deltaX","deltaY","speed","oldVX","oldVY","currentSpeed","position","newRotationSpeed","atan2","recycle","parent","removeChild","parseArt","baseTexture","window","console","warn","parseData","Sprite","PolygonalChain","countingLengths","totalLength","Array","isArray","chain","prevPoint","j","second","push","p1","p2","l","segLength","getRandomPoint","out","chosenSeg","rand","random","ticker","Ticker","shared","helperPoint","Emitter","particleParent","particleImages","config","_currentImageIndex","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","rotate","updateSpawnPos","updateOwnerPos","Object","defineProperty","cleanup","particle","slice","partClass","startRotation","min","max","lifetime","blendMode","parseSpawnType","frequency","pos","initAdditional","clone","emit","undefined","autoUpdate","orderedArt","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","newRot","diff","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","emitPosX","emitPosY","len","particleConstructor","floor","applyAdditionalProperties","addChildAt","addChild","cb","width","height","radius","MATH_FUNCS","WHITELISTER","RegExp","concat","join","PathParticle","path","initialRotation","initialPosition","movement","pathString","matches","match","Function","parsePath","error","AnimatedParticle","textures","duration","framerate","elapsed","loop","frame","outArr","outTextures","tex","dupe","count","LinkedListContainer","apply","arguments","_firstChild","_lastChild","_childCount","children","_i","child","sortDirty","transform","_parentID","_boundsID","onChildrenChange","index","Error","target","addChildBelow","relative","addChildAbove","swapChildren","child2","getChildIndex","test","setChildIndex","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","begin","range","removed","RangeError","updateTransform","worldAlpha","calculateBounds","_bounds","clear","_calculateBounds","renderable","_mask","maskObject","addBoundsMask","filterArea","addBoundsArea","addBounds","updateID","getLocalBounds","rect","skipChildrenUpdate","result","DisplayObject","render","renderer","filters","renderAdvanced","_render","batch","flush","mask","_enabledFilters","enabled","filter","pop","renderCanvas","maskManager","pushMask","_renderCanvas","popMask","Container"],"mappings":"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","file":"dist/pixi-particles.min.js.map","sourcesContent":["import { ParticleUtils, EaseSegment, SimpleEase, Color } from './ParticleUtils';\r\nimport { BasicTweenable } from './EmitterConfig';\r\n\r\nexport interface ValueStep<T> {\r\n    value: T;\r\n    time: number;\r\n}\r\n\r\nexport interface ValueList<T> {\r\n    list: ValueStep<T>[];\r\n    isStepped?: boolean;\r\n    ease?: SimpleEase|EaseSegment[];\r\n}\r\n/**\r\n * A single node in a PropertyList.\r\n */\r\nexport class PropertyNode<V>\r\n{\r\n    /**\r\n     * Value for the node.\r\n     */\r\n    public value: V;\r\n    /**\r\n     * Time value for the node. Between 0-1.\r\n     */\r\n    public time: number;\r\n    /**\r\n     * The next node in line.\r\n     */\r\n    public next: PropertyNode<V>;\r\n    /**\r\n     * If this is the first node in the list, controls if the entire list is stepped or not.\r\n     */\r\n    public isStepped: boolean;\r\n    public ease: SimpleEase;\r\n\r\n    /**\r\n     * @param value The value for this node\r\n     * @param time The time for this node, between 0-1\r\n     * @param [ease] Custom ease for this list. Only relevant for the first node.\r\n     */\r\n    constructor(value: V, time: number, ease?: SimpleEase|EaseSegment[])\r\n    {\r\n        this.value = value;\r\n        this.time = time;\r\n        this.next = null;\r\n        this.isStepped = false;\r\n        if (ease)\r\n        {\r\n            this.ease = typeof ease === 'function' ? ease : ParticleUtils.generateEase(ease);\r\n        }\r\n        else\r\n        {\r\n            this.ease = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n     * {start, end}.\r\n     * @param data The data for the list.\r\n     * @param data.list The array of value and time objects.\r\n     * @param data.isStepped If the list is stepped rather than interpolated.\r\n     * @param data.ease Custom ease for this list.\r\n     * @return The first node in the list\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    public static createList<T extends(string|number)>(data: ValueList<T>|BasicTweenable<T>): PropertyNode<T extends string ? Color : T>\r\n    {\r\n        if ('list' in data)\r\n        {\r\n            const array = data.list;\r\n            let node;\r\n            const { value, time } = array[0];\r\n\r\n            // eslint-disable-next-line max-len\r\n            const first = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\r\n\r\n            // only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n            if (array.length > 2 || (array.length === 2 && array[1].value !== value))\r\n            {\r\n                for (let i = 1; i < array.length; ++i)\r\n                {\r\n                    const { value, time } = array[i];\r\n\r\n                    node.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\r\n                    node = node.next;\r\n                }\r\n            }\r\n            first.isStepped = !!data.isStepped;\r\n\r\n            return first as PropertyNode<T extends string ? Color : T>;\r\n        }\r\n\r\n        // Handle deprecated version here\r\n        const start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\r\n        // only set up a next value if it is different from the starting value\r\n\r\n        if (data.end !== data.start)\r\n        {\r\n            start.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\r\n        }\r\n\r\n        return start as PropertyNode<T extends string ? Color : T>;\r\n    }\r\n}\r\n","import { Texture } from '@pixi/core';\r\nimport { Point } from '@pixi/math';\r\nimport { BLEND_MODES } from '@pixi/constants';\r\nimport { PropertyNode, ValueStep } from './PropertyNode';\r\n// get Texture.from(), only supports V5 and V6 with individual packages\r\n/**\r\n * @hidden\r\n */\r\nconst TextureFromString = Texture.from;\r\n\r\nexport function GetTextureFromString(s: string): Texture\r\n{\r\n    return TextureFromString(s);\r\n}\r\n\r\nexport interface Color {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a?: number;\r\n}\r\n\r\nexport interface EaseSegment {\r\n    cp: number;\r\n    s: number;\r\n    e: number;\r\n}\r\n\r\nexport type SimpleEase = (time: number) => number;\r\n\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n */\r\nexport namespace ParticleUtils {\r\n    /**\r\n     * If errors and warnings should be logged within the library.\r\n     */\r\n    export const verbose = false;\r\n\r\n    export const DEG_TO_RADS = Math.PI / 180;\r\n\r\n    /**\r\n     * Rotates a point by a given angle.\r\n     * @param angle The angle to rotate by in degrees\r\n     * @param p The point to rotate around 0,0.\r\n     */\r\n    export function rotatePoint(angle: number, p: Point): void\r\n    {\r\n        if (!angle) return;\r\n        angle *= ParticleUtils.DEG_TO_RADS;\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n        const xnew = (p.x * c) - (p.y * s);\r\n        const ynew = (p.x * s) + (p.y * c);\r\n\r\n        p.x = xnew;\r\n        p.y = ynew;\r\n    }\r\n\r\n    /**\r\n     * Combines separate color components (0-255) into a single uint color.\r\n     * @param r The red value of the color\r\n     * @param g The green value of the color\r\n     * @param b The blue value of the color\r\n     * @return The color in the form of 0xRRGGBB\r\n     */\r\n    export function combineRGBComponents(r: number, g: number, b: number/* , a*/): number\r\n    {\r\n        return /* a << 24 |*/ (r << 16) | (g << 8) | b;\r\n    }\r\n\r\n    /**\r\n     * Reduces the point to a length of 1.\r\n     * @param point The point to normalize\r\n     */\r\n    export function normalize(point: Point): void\r\n    {\r\n        const oneOverLen = 1 / ParticleUtils.length(point);\r\n\r\n        point.x *= oneOverLen;\r\n        point.y *= oneOverLen;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the x and y values of this point by a value.\r\n     * @param point The point to scaleBy\r\n     * @param value The value to scale by.\r\n     */\r\n    export function scaleBy(point: Point, value: number): void\r\n    {\r\n        point.x *= value;\r\n        point.y *= value;\r\n    }\r\n\r\n    /**\r\n     * Returns the length (or magnitude) of this point.\r\n     * @param point The point to measure length\r\n     * @return The length of this point.\r\n     */\r\n    export function length(point: Point): number\r\n    {\r\n        return Math.sqrt((point.x * point.x) + (point.y * point.y));\r\n    }\r\n\r\n    /**\r\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n     * {r, g, b, (a)}.\r\n     * @param color The input color string.\r\n     * @param output An object to put the output in. If omitted, a new object is created.\r\n     * @return The object with r, g, and b properties, possibly with an a property.\r\n     */\r\n    export function hexToRGB(color: string, output?: Color): Color\r\n    {\r\n        if (!output)\r\n        {\r\n            output = {} as Color;\r\n        }\r\n        if (color.charAt(0) === '#')\r\n        {\r\n            color = color.substr(1);\r\n        }\r\n        else if (color.indexOf('0x') === 0)\r\n        {\r\n            color = color.substr(2);\r\n        }\r\n        let alpha;\r\n\r\n        if (color.length === 8)\r\n        {\r\n            alpha = color.substr(0, 2);\r\n            color = color.substr(2);\r\n        }\r\n        output.r = parseInt(color.substr(0, 2), 16);// Red\r\n        output.g = parseInt(color.substr(2, 2), 16);// Green\r\n        output.b = parseInt(color.substr(4, 2), 16);// Blue\r\n        if (alpha)\r\n        {\r\n            output.a = parseInt(alpha, 16);\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n     * by the related tool at http://www.greensock.com/customease/.\r\n     * @param segments An array of segments, as created by\r\n     * http://www.greensock.com/customease/.\r\n     * @return A function that calculates the percentage of change at\r\n     *                    a given point in time (0-1 inclusive).\r\n     */\r\n    export function generateEase(segments: EaseSegment[]): SimpleEase\r\n    {\r\n        const qty = segments.length;\r\n        const oneOverQty = 1 / qty;\r\n        /*\r\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n         * @param {Number} time The time of the ease, 0-1 inclusive.\r\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n         *                  ease goes outside those bounds).\r\n         */\r\n\r\n        // eslint-disable-next-line func-names\r\n        return function (time: number): number\r\n        {\r\n            const i = (qty * time) | 0;// do a quick floor operation\r\n\r\n            const t = (time - (i * oneOverQty)) * qty;\r\n            const s = segments[i] || segments[qty - 1];\r\n\r\n            return (s.s + (t * ((2 * (1 - t) * (s.cp - s.s)) + (t * (s.e - s.s)))));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a blend mode, ensuring that it is valid.\r\n     * @param name The name of the blend mode to get.\r\n     * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n     */\r\n    export function getBlendMode(name: string): number\r\n    {\r\n        if (!name) return BLEND_MODES.NORMAL;\r\n        name = name.toUpperCase();\r\n        while (name.indexOf(' ') >= 0)\r\n        {\r\n            name = name.replace(' ', '_');\r\n        }\r\n\r\n        return (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\r\n    }\r\n\r\n    /**\r\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n     * @param list The list of data to convert.\r\n     * @param [numSteps=10] The number of steps to use.\r\n     * @return The blend mode as specified in the PIXI.blendModes enumeration.\r\n     */\r\n    export function createSteppedGradient(list: ValueStep<string>[], numSteps = 10): PropertyNode<Color>\r\n    {\r\n        if (typeof numSteps !== 'number' || numSteps <= 0)\r\n        {\r\n            numSteps = 10;\r\n        }\r\n        const first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\r\n\r\n        first.isStepped = true;\r\n        let currentNode = first;\r\n        let current = list[0];\r\n        let nextIndex = 1;\r\n        let next = list[nextIndex];\r\n\r\n        for (let i = 1; i < numSteps; ++i)\r\n        {\r\n            let lerp = i / numSteps;\r\n            // ensure we are on the right segment, if multiple\r\n\r\n            while (lerp > next.time)\r\n            {\r\n                current = next;\r\n                next = list[++nextIndex];\r\n            }\r\n            // convert the lerp value to the segment range\r\n            lerp = (lerp - current.time) / (next.time - current.time);\r\n            const curVal = ParticleUtils.hexToRGB(current.value);\r\n            const nextVal = ParticleUtils.hexToRGB(next.value);\r\n            const output: Color = {\r\n                r: ((nextVal.r - curVal.r) * lerp) + curVal.r,\r\n                g: ((nextVal.g - curVal.g) * lerp) + curVal.g,\r\n                b: ((nextVal.b - curVal.b) * lerp) + curVal.b,\r\n            };\r\n\r\n            currentNode.next = new PropertyNode(output, i / numSteps);\r\n            currentNode = currentNode.next;\r\n        }\r\n\r\n        // we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n        // the particle has died of old age\r\n        return first;\r\n    }\r\n}\r\n","import { ParticleUtils, SimpleEase, Color } from './ParticleUtils';\r\nimport { PropertyNode } from './PropertyNode';\r\n\r\nfunction intValueSimple(this: PropertyList<number>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n\r\n    return ((this.next.value - this.current.value) * lerp) + this.current.value;\r\n}\r\n\r\nfunction intColorSimple(this: PropertyList<Color>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n    const curVal = this.current.value; const\r\n        nextVal = this.next.value;\r\n    const r = ((nextVal.r - curVal.r) * lerp) + curVal.r;\r\n    const g = ((nextVal.g - curVal.g) * lerp) + curVal.g;\r\n    const b = ((nextVal.b - curVal.b) * lerp) + curVal.b;\r\n\r\n    return ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueComplex(this: PropertyList<number>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n    // make sure we are on the right segment\r\n    while (lerp > this.next.time)\r\n    {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    // convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n\r\n    return ((this.next.value - this.current.value) * lerp) + this.current.value;\r\n}\r\n\r\nfunction intColorComplex(this: PropertyList<Color>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n    // make sure we are on the right segment\r\n    while (lerp > this.next.time)\r\n    {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    // convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    const curVal = this.current.value; const\r\n        nextVal = this.next.value;\r\n    const r = ((nextVal.r - curVal.r) * lerp) + curVal.r;\r\n    const g = ((nextVal.g - curVal.g) * lerp) + curVal.g;\r\n    const b = ((nextVal.b - curVal.b) * lerp) + curVal.b;\r\n\r\n    return ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueStepped(this: PropertyList<number>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n    // make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time)\r\n    {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n\r\n    return this.current.value;\r\n}\r\n\r\nfunction intColorStepped(this: PropertyList<Color>, lerp: number): number\r\n{\r\n    if (this.ease)\r\n    { lerp = this.ease(lerp); }\r\n    // make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time)\r\n    {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    const curVal = this.current.value;\r\n\r\n    return ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}\r\n\r\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n */\r\nexport class PropertyList<V>\r\n{\r\n    /**\r\n     * The current property node in the linked list.\r\n     */\r\n    public current: PropertyNode<V>;\r\n    /**\r\n     * The next property node in the linked list. Stored separately for slightly less variable\r\n     * access.\r\n     */\r\n    public next: PropertyNode<V>;\r\n    /**\r\n     * Calculates the correct value for the current interpolation value. This method is set in\r\n     * the reset() method.\r\n     * @param lerp The interpolation value from 0-1.\r\n     * @return The interpolated value. Colors are converted to the hex value.\r\n     */\r\n    public interpolate: (lerp: number) => number;\r\n    /**\r\n     * A custom easing method for this list.\r\n     * @param lerp The interpolation value from 0-1.\r\n     * @return The eased value, also from 0-1.\r\n     */\r\n    public ease: SimpleEase;\r\n    /**\r\n     * If this list manages colors, which requires a different method for interpolation.\r\n     */\r\n    private isColor: boolean;\r\n\r\n    /**\r\n     * @param isColor If this list handles color values\r\n     */\r\n    constructor(isColor = false)\r\n    {\r\n        this.current = null;\r\n        this.next = null;\r\n        this.isColor = !!isColor;\r\n        this.interpolate = null;\r\n        this.ease = null;\r\n    }\r\n\r\n    /**\r\n     * Resets the list for use.\r\n     * @param first The first node in the list.\r\n     * @param first.isStepped If the values should be stepped instead of interpolated linearly.\r\n     */\r\n    public reset(first: PropertyNode<V>): void\r\n    {\r\n        this.current = first;\r\n        this.next = first.next;\r\n        const isSimple = this.next && this.next.time >= 1;\r\n\r\n        if (isSimple)\r\n        {\r\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n        }\r\n        else if (first.isStepped)\r\n        {\r\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n        }\r\n        else\r\n        {\r\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n        }\r\n        this.ease = this.current.ease;\r\n    }\r\n}\r\n","import { Emitter } from './Emitter';\r\nimport { ParticleUtils, SimpleEase, Color, GetTextureFromString } from './ParticleUtils';\r\nimport { PropertyList } from './PropertyList';\r\nimport { LinkedListChild } from './LinkedListContainer';\r\nimport { Texture } from '@pixi/core';\r\nimport { Point } from '@pixi/math';\r\nimport { Sprite } from '@pixi/sprite';\r\n\r\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n */\r\nexport class Particle extends Sprite implements LinkedListChild\r\n{\r\n    /**\r\n     * The emitter that controls this particle.\r\n     */\r\n    public emitter: Emitter;\r\n    /**\r\n     * The velocity of the particle. Speed may change, but the angle also\r\n     * contained in velocity is constant.\r\n     */\r\n    public velocity: Point;\r\n    /**\r\n     * The maximum lifetime of this particle, in seconds.\r\n     */\r\n    public maxLife: number;\r\n    /**\r\n     * The current age of the particle, in seconds.\r\n     */\r\n    public age: number;\r\n    /**\r\n     * A simple easing function to be applied to all properties that\r\n     * are being interpolated.\r\n     */\r\n    public ease: SimpleEase;\r\n    /**\r\n     * Extra data that the emitter passes along for custom particles.\r\n     */\r\n    public extraData: any;\r\n    /**\r\n     * The alpha of the particle throughout its life.\r\n     */\r\n    public alphaList: PropertyList<number>;\r\n    /**\r\n     * The speed of the particle throughout its life.\r\n     */\r\n    public speedList: PropertyList<number>;\r\n    /**\r\n     * A multiplier from 0-1 applied to the speed of the particle at all times.\r\n     */\r\n    public speedMultiplier: number;\r\n    /**\r\n     * Acceleration to apply to the particle.\r\n     */\r\n    public acceleration: Point;\r\n    /**\r\n     * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n     * will disable the maximum speed.\r\n     */\r\n    public maxSpeed: number;\r\n    /**\r\n     * Speed at which the particle rotates, in radians per second.\r\n     */\r\n    public rotationSpeed: number;\r\n\r\n    /**\r\n     * Acceleration of rotation (angular acceleration) to apply to the particle.\r\n     */\r\n    public rotationAcceleration: number;\r\n\r\n    /**\r\n     * If particle rotation is locked, preventing rotation from occurring due\r\n     * to directional changes.\r\n     */\r\n    public noRotation: boolean;\r\n    /**\r\n     * The scale of the particle throughout its life.\r\n     */\r\n    public scaleList: PropertyList<number>;\r\n    /**\r\n     * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n     */\r\n    public scaleMultiplier: number;\r\n    /**\r\n     * The tint of the particle throughout its life.\r\n     */\r\n    public colorList: PropertyList<Color>;\r\n    /**\r\n     * A reference to init, so that subclasses can access it without the penalty of Function.call()\r\n     */\r\n    protected Particle_init: typeof Particle.prototype.init;\r\n    /**\r\n     * A reference to update so that subclasses can access the original without the overhead\r\n     * of Function.call().\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     * @return The standard interpolation multiplier (0-1) used for all relevant particle\r\n     *                   properties. A value of -1 means the particle died of old age instead.\r\n     */\r\n    protected Particle_update: typeof Particle.prototype.update;\r\n    protected Particle_destroy: typeof Particle.prototype.destroy;\r\n    protected Sprite_destroy: typeof Sprite.prototype.destroy;\r\n    /**\r\n     * If alpha should be interpolated at all.\r\n     */\r\n    protected _doAlpha: boolean;\r\n    /**\r\n     * If scale should be interpolated at all.\r\n     */\r\n    protected _doScale: boolean;\r\n    /**\r\n     * If speed should be interpolated at all.\r\n     */\r\n    protected _doSpeed: boolean;\r\n    /**\r\n     * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n     * and _doSpeed gets priority.\r\n     */\r\n    protected _doAcceleration: boolean;\r\n    /**\r\n     * If color should be interpolated at all.\r\n     */\r\n    protected _doColor: boolean;\r\n    /**\r\n     * If normal movement should be handled. Subclasses wishing to override movement\r\n     * can set this to false in init().\r\n     */\r\n    protected _doNormalMovement: boolean;\r\n    /**\r\n     * One divided by the max life of the particle, saved for slightly faster math.\r\n     */\r\n    private _oneOverLife: number;\r\n    /**\r\n     * Reference to the next particle in the list.\r\n     */\r\n    public next: Particle;\r\n\r\n    /**\r\n     * Reference to the previous particle in the list.\r\n     */\r\n    public prev: Particle;\r\n\r\n    public prevChild: LinkedListChild;\r\n    public nextChild: LinkedListChild;\r\n\r\n    /**\r\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n     */\r\n    constructor(emitter: Emitter)\r\n    {\r\n        // start off the sprite with a blank texture, since we are going to replace it\r\n        // later when the particle is initialized.\r\n        super();\r\n        // initialize LinkedListChild props so they are included in underlying JS class definition\r\n        this.prevChild = this.nextChild = null;\r\n\r\n        this.emitter = emitter;\r\n        // particles should be centered\r\n        this.anchor.x = this.anchor.y = 0.5;\r\n        this.velocity = new Point();\r\n        this.rotationSpeed = 0;\r\n        this.rotationAcceleration = 0;\r\n        this.maxLife = 0;\r\n        this.age = 0;\r\n        this.ease = null;\r\n        this.extraData = null;\r\n        this.alphaList = new PropertyList();\r\n        this.speedList = new PropertyList();\r\n        this.speedMultiplier = 1;\r\n        this.acceleration = new Point();\r\n        this.maxSpeed = NaN;\r\n        this.scaleList = new PropertyList();\r\n        this.scaleMultiplier = 1;\r\n        this.colorList = new PropertyList(true);\r\n        this._doAlpha = false;\r\n        this._doScale = false;\r\n        this._doSpeed = false;\r\n        this._doAcceleration = false;\r\n        this._doColor = false;\r\n        this._doNormalMovement = false;\r\n        this._oneOverLife = 0;\r\n        this.next = null;\r\n        this.prev = null;\r\n\r\n        // save often used functions on the instance instead of the prototype for better speed\r\n        this.init = this.init;\r\n        this.Particle_init = Particle.prototype.init;\r\n        this.update = this.update;\r\n        this.Particle_update = Particle.prototype.update;\r\n        this.Sprite_destroy = super.destroy;\r\n        this.Particle_destroy = Particle.prototype.destroy;\r\n        this.applyArt = this.applyArt;\r\n        this.kill = this.kill;\r\n    }\r\n\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    public init(): void\r\n    {\r\n        // reset the age\r\n        this.age = 0;\r\n        // set up the velocity based on the start speed and rotation\r\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n        this.velocity.y = 0;\r\n        ParticleUtils.rotatePoint(this.rotation, this.velocity);\r\n        if (this.noRotation)\r\n        {\r\n            this.rotation = 0;\r\n        }\r\n        else\r\n        {\r\n            // convert rotation to Radians from Degrees\r\n            this.rotation *= ParticleUtils.DEG_TO_RADS;\r\n        }\r\n        // convert rotation speed to Radians from Degrees\r\n        this.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\r\n        this.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\r\n\r\n        // set alpha to inital alpha\r\n        this.alpha = this.alphaList.current.value;\r\n        // set scale to initial scale\r\n        this.scale.x = this.scale.y = this.scaleList.current.value;\r\n        // figure out what we need to interpolate\r\n        this._doAlpha = !!this.alphaList.current.next;\r\n        this._doSpeed = !!this.speedList.current.next;\r\n        this._doScale = !!this.scaleList.current.next;\r\n        this._doColor = !!this.colorList.current.next;\r\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n        // _doNormalMovement can be cancelled by subclasses\r\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n        // save our lerp helper\r\n        this._oneOverLife = 1 / this.maxLife;\r\n        // set the inital color\r\n        const color = this.colorList.current.value;\r\n\r\n        this.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\r\n        // ensure visibility\r\n        this.visible = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the texture for the particle. This can be overridden to allow\r\n     * for an animated particle.\r\n     * @param art The texture to set.\r\n     */\r\n    public applyArt(art: any): void\r\n    {\r\n        this.texture = art || Texture.EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     * @return The standard interpolation multiplier (0-1) used for all\r\n     *         relevant particle properties. A value of -1 means the particle\r\n     *         died of old age instead.\r\n     */\r\n    public update(delta: number): number\r\n    {\r\n        // increase age\r\n        this.age += delta;\r\n        // recycle particle if it is too old\r\n        if (this.age >= this.maxLife || this.age < 0)\r\n        {\r\n            this.kill();\r\n\r\n            return -1;\r\n        }\r\n\r\n        // determine our interpolation value\r\n        let lerp = this.age * this._oneOverLife;// lifetime / maxLife;\r\n\r\n        if (this.ease)\r\n        {\r\n            if (this.ease.length === 4)\r\n            {\r\n                // the t, b, c, d parameters that some tween libraries use\r\n                // (time, initial value, end value, duration)\r\n                lerp = (this.ease as any)(lerp, 0, 1, 1);\r\n            }\r\n            else\r\n            {\r\n                // the simplified version that we like that takes\r\n                // one parameter, time from 0-1. TweenJS eases provide this usage.\r\n                lerp = this.ease(lerp);\r\n            }\r\n        }\r\n\r\n        // interpolate alpha\r\n        if (this._doAlpha)\r\n        {\r\n            this.alpha = this.alphaList.interpolate(lerp);\r\n        }\r\n        // interpolate scale\r\n        if (this._doScale)\r\n        {\r\n            const scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n\r\n            this.scale.x = this.scale.y = scale;\r\n        }\r\n        // handle movement\r\n        if (this._doNormalMovement)\r\n        {\r\n            let deltaX: number;\r\n            let deltaY: number;\r\n            // interpolate speed\r\n\r\n            if (this._doSpeed)\r\n            {\r\n                const speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\r\n                ParticleUtils.normalize(this.velocity);\r\n                ParticleUtils.scaleBy(this.velocity, speed);\r\n                deltaX = this.velocity.x * delta;\r\n                deltaY = this.velocity.y * delta;\r\n            }\r\n            else if (this._doAcceleration)\r\n            {\r\n                const oldVX = this.velocity.x;\r\n                const oldVY = this.velocity.y;\r\n\r\n                this.velocity.x += this.acceleration.x * delta;\r\n                this.velocity.y += this.acceleration.y * delta;\r\n                if (this.maxSpeed)\r\n                {\r\n                    const currentSpeed = ParticleUtils.length(this.velocity);\r\n                    // if we are going faster than we should, clamp at the max speed\r\n                    // DO NOT recalculate vector length\r\n\r\n                    if (currentSpeed > this.maxSpeed)\r\n                    {\r\n                        ParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n                    }\r\n                }\r\n                // calculate position delta by the midpoint between our old velocity and our new velocity\r\n                deltaX = (oldVX + this.velocity.x) / 2 * delta;\r\n                deltaY = (oldVY + this.velocity.y) / 2 * delta;\r\n            }\r\n            else\r\n            {\r\n                deltaX = this.velocity.x * delta;\r\n                deltaY = this.velocity.y * delta;\r\n            }\r\n            // adjust position based on velocity\r\n            this.position.x += deltaX;\r\n            this.position.y += deltaY;\r\n        }\r\n        // interpolate color\r\n        if (this._doColor)\r\n        {\r\n            this.tint = this.colorList.interpolate(lerp);\r\n        }\r\n        // update rotation\r\n        if (this.rotationAcceleration !== 0)\r\n        {\r\n            const newRotationSpeed = this.rotationSpeed + (this.rotationAcceleration * delta);\r\n\r\n            this.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\r\n            this.rotationSpeed = newRotationSpeed;\r\n        }\r\n        else if (this.rotationSpeed !== 0)\r\n        {\r\n            this.rotation += this.rotationSpeed * delta;\r\n        }\r\n        else if (this.acceleration && !this.noRotation)\r\n        {\r\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\r\n        }\r\n\r\n        return lerp;\r\n    }\r\n\r\n    /**\r\n     * Kills the particle, removing it from the display list\r\n     * and telling the emitter to recycle it.\r\n     */\r\n    public kill(): void\r\n    {\r\n        this.emitter.recycle(this);\r\n    }\r\n\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    public destroy(): void\r\n    {\r\n        if (this.parent)\r\n        {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.Sprite_destroy();\r\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList\r\n    = this.speedList = this.ease = this.next = this.prev = null;\r\n    }\r\n\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @param art The array of art data. For Particle, it should be an array of\r\n     *            Textures. Any strings in the array will be converted to\r\n     *            Textures via Texture.from().\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    public static parseArt(art: any[]): any[]\r\n    {\r\n        // convert any strings to Textures.\r\n        let i;\r\n\r\n        for (i = art.length; i >= 0; --i)\r\n        {\r\n            if (typeof art[i] === 'string')\r\n            {\r\n                art[i] = GetTextureFromString(art[i]);\r\n            }\r\n        }\r\n        // particles from different base textures will be slower in WebGL than if they\r\n        // were from one spritesheet\r\n        if (ParticleUtils.verbose)\r\n        {\r\n            for (i = art.length - 1; i > 0; --i)\r\n            {\r\n                if (art[i].baseTexture !== art[i - 1].baseTexture)\r\n                {\r\n                    if (window.console)\r\n                    {\r\n                        // eslint-disable-next-line max-len\r\n                        console.warn('PixiParticles: using particle textures from different images may hinder performance in WebGL');\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return art;\r\n    }\r\n\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * Particle does nothing to the extra data.\r\n     * @param extraData The extra data from the particle config.\r\n     * @return The parsed extra data.\r\n     */\r\n    public static parseData(extraData: any): any\r\n    {\r\n        return extraData;\r\n    }\r\n}\r\n","import { Point } from '@pixi/math';\r\n\r\nexport interface BasicPoint\r\n{\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Segment\r\n{\r\n    p1: BasicPoint;\r\n    p2: BasicPoint;\r\n    l: number;\r\n}\r\n\r\n/**\r\n * Chain of line segments for generating spawn positions.\r\n */\r\nexport class PolygonalChain\r\n{\r\n    /**\r\n     * List of segment objects in the chain.\r\n     */\r\n    private segments: Segment[];\r\n    /**\r\n     * Total length of all segments of the chain.\r\n     */\r\n    private totalLength: number;\r\n    /**\r\n     * Total length of segments up to and including the segment of the same index.\r\n     * Used for weighted random selection of segment.\r\n     */\r\n    private countingLengths: number[];\r\n\r\n    /**\r\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n     */\r\n    constructor(data: BasicPoint[]|BasicPoint[][])\r\n    {\r\n        this.segments = [];\r\n        this.countingLengths = [];\r\n        this.totalLength = 0;\r\n        this.init(data);\r\n    }\r\n\r\n    /**\r\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n     */\r\n    private init(data: BasicPoint[]|BasicPoint[][]): void\r\n    {\r\n        // if data is not present, set up a segment of length 0\r\n        if (!data || !data.length)\r\n        {\r\n            this.segments.push({ p1: { x: 0, y: 0 }, p2: { x: 0, y: 0 }, l: 0 });\r\n        }\r\n        else if (Array.isArray(data[0]))\r\n        {\r\n            // list of segment chains, each defined as a list of points\r\n            for (let i = 0; i < data.length; ++i)\r\n            {\r\n                // loop through the chain, connecting points\r\n                const chain = data[i] as BasicPoint[];\r\n                let prevPoint = chain[0] as BasicPoint;\r\n\r\n                for (let j = 1; j < chain.length; ++j)\r\n                {\r\n                    const second = chain[j] as BasicPoint;\r\n\r\n                    this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                    prevPoint = second;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prevPoint = data[0] as BasicPoint;\r\n            // list of points\r\n\r\n            for (let i = 1; i < data.length; ++i)\r\n            {\r\n                const second = data[i] as BasicPoint;\r\n\r\n                this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                prevPoint = second;\r\n            }\r\n        }\r\n        // now go through our segments to calculate the lengths so that we\r\n        // can set up a nice weighted random distribution\r\n        for (let i = 0; i < this.segments.length; ++i)\r\n        {\r\n            const { p1, p2 } = this.segments[i];\r\n            const segLength = Math.sqrt(((p2.x - p1.x) * (p2.x - p1.x)) + ((p2.y - p1.y) * (p2.y - p1.y)));\r\n            // save length so we can turn a random number into a 0-1 interpolation value later\r\n\r\n            this.segments[i].l = segLength;\r\n            this.totalLength += segLength;\r\n            // keep track of the length so far, counting up\r\n            this.countingLengths.push(this.totalLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a random point in the chain.\r\n     * @param out The point to store the selected position in.\r\n     */\r\n    public getRandomPoint(out: Point): void\r\n    {\r\n        // select a random spot in the length of the chain\r\n        const rand = Math.random() * this.totalLength;\r\n        let chosenSeg: Segment;\r\n        let lerp: number;\r\n\r\n        // if only one segment, it wins\r\n        if (this.segments.length === 1)\r\n        {\r\n            chosenSeg = this.segments[0];\r\n            lerp = rand;\r\n        }\r\n        else\r\n        {\r\n            // otherwise, go through countingLengths until we have determined\r\n            // which segment we chose\r\n            for (let i = 0; i < this.countingLengths.length; ++i)\r\n            {\r\n                if (rand < this.countingLengths[i])\r\n                {\r\n                    chosenSeg = this.segments[i];\r\n                    // set lerp equal to the length into that segment\r\n                    // (i.e. the remainder after subtracting all the segments before it)\r\n                    lerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // divide lerp by the segment length, to result in a 0-1 number.\r\n        lerp /= chosenSeg.l || 1;\r\n        const { p1, p2 } = chosenSeg;\r\n        // now calculate the position in the segment that the lerp value represents\r\n\r\n        out.x = p1.x + (lerp * (p2.x - p1.x));\r\n        out.y = p1.y + (lerp * (p2.y - p1.y));\r\n    }\r\n}\r\n","import { ParticleUtils, Color, SimpleEase } from './ParticleUtils';\r\nimport { Particle } from './Particle';\r\nimport { PropertyNode } from './PropertyNode';\r\nimport { PolygonalChain } from './PolygonalChain';\r\nimport { EmitterConfig, OldEmitterConfig } from './EmitterConfig';\r\nimport { Container } from '@pixi/display';\r\nimport { settings } from '@pixi/settings';\r\nimport { Point, Circle, Rectangle } from '@pixi/math';\r\nimport { Ticker } from '@pixi/ticker';\r\n// get the shared ticker, only supports V5 and V6 with individual packages\r\n/**\r\n * @hidden\r\n */\r\nconst ticker = Ticker.shared;\r\n\r\nexport interface ParticleConstructor\r\n{\r\n    new (emitter: Emitter): Particle;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A particle emitter.\r\n */\r\nexport class Emitter\r\n{\r\n    /**\r\n     * The constructor used to create new particles. The default is\r\n     * the built in particle class.\r\n     */\r\n    protected _particleConstructor: typeof Particle;\r\n    // properties for individual particles\r\n    /**\r\n     * An array of PIXI Texture objects.\r\n     */\r\n    public particleImages: any[];\r\n    /**\r\n     * The first node in the list of alpha values for all particles.\r\n     */\r\n    public startAlpha: PropertyNode<number>;\r\n    /**\r\n     * The first node in the list of speed values of all particles.\r\n     */\r\n    public startSpeed: PropertyNode<number>;\r\n    /**\r\n     * A minimum multiplier for the speed of a particle at all stages of its life. A value between\r\n     * minimumSpeedMultiplier and 1 is randomly generated for each particle.\r\n     */\r\n    public minimumSpeedMultiplier: number;\r\n    /**\r\n     * Acceleration to apply to particles. Using this disables\r\n     * any interpolation of particle speed. If the particles do\r\n     * not have a rotation speed, then they will be rotated to\r\n     * match the direction of travel.\r\n     */\r\n    public acceleration: Point;\r\n    /**\r\n     * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n     * will disable the maximum speed.\r\n     */\r\n    public maxSpeed: number;\r\n    /**\r\n     * The first node in the list of scale values of all particles.\r\n     */\r\n    public startScale: PropertyNode<number>;\r\n    /**\r\n     * A minimum multiplier for the scale of a particle at all stages of its life. A value between\r\n     * minimumScaleMultiplier and 1 is randomly generated for each particle.\r\n     */\r\n    public minimumScaleMultiplier: number;\r\n    /**\r\n     * The first node in the list of  color values of all particles, as red, green, and blue\r\n     * uints from 0-255.\r\n     */\r\n    public startColor: PropertyNode<Color>;\r\n    /**\r\n     * The minimum lifetime for a particle, in seconds.\r\n     */\r\n    public minLifetime: number;\r\n    /**\r\n     * The maximum lifetime for a particle, in seconds.\r\n     */\r\n    public maxLifetime: number;\r\n    /**\r\n     * The minimum start rotation for a particle, in degrees. This value\r\n     * is ignored if the spawn type is \"burst\" or \"arc\".\r\n     */\r\n    public minStartRotation: number;\r\n    /**\r\n     * The maximum start rotation for a particle, in degrees. This value\r\n     * is ignored if the spawn type is \"burst\" or \"arc\".\r\n     */\r\n    public maxStartRotation: number;\r\n    /**\r\n     * If no particle rotation should occur. Starting rotation will still\r\n     * affect the direction in which particles move. If the rotation speed\r\n     * is set, then this will be ignored.\r\n     */\r\n    public noRotation: boolean;\r\n    /**\r\n     * The minimum rotation speed for a particle, in degrees per second.\r\n     * This only visually spins the particle, it does not change direction\r\n     * of movement.\r\n     */\r\n    public minRotationSpeed: number;\r\n    /**\r\n     * The maximum rotation speed for a particle, in degrees per second.\r\n     * This only visually spins the particle, it does not change direction\r\n     * of movement.\r\n     */\r\n    public maxRotationSpeed: number;\r\n    /**\r\n    * The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\r\n    */\r\n    public rotationAcceleration: number;\r\n    /**\r\n     * The blend mode for all particles, as named by PIXI.blendModes.\r\n     */\r\n    public particleBlendMode: number;\r\n    /**\r\n     * An easing function for nonlinear interpolation of values. Accepts a single\r\n     * parameter of time as a value from 0-1, inclusive. Expected outputs are values\r\n     * from 0-1, inclusive.\r\n     */\r\n    public customEase: SimpleEase;\r\n    /**\r\n     *\tExtra data for use in custom particles. The emitter doesn't look inside, but\r\n     *\tpasses it on to the particle to use in init().\r\n     */\r\n    public extraData: any;\r\n    // properties for spawning particles\r\n    /**\r\n     * Time between particle spawns in seconds.\r\n     */\r\n    protected _frequency: number;\r\n    /**\r\n     * Chance that a particle will be spawned on each opportunity to spawn one.\r\n     * 0 is 0%, 1 is 100%.\r\n     */\r\n    public spawnChance: number;\r\n    /**\r\n     * Maximum number of particles to keep alive at a time. If this limit\r\n     * is reached, no more particles will spawn until some have died.\r\n     */\r\n    public maxParticles: number;\r\n    /**\r\n     * The amount of time in seconds to emit for before setting emit to false.\r\n     * A value of -1 is an unlimited amount of time.\r\n     */\r\n    public emitterLifetime: number;\r\n    /**\r\n     * Position at which to spawn particles, relative to the emitter's owner's origin.\r\n     * For example, the flames of a rocket travelling right might have a spawnPos\r\n     * of {x:-50, y:0}.\r\n     * to spawn at the rear of the rocket.\r\n     * To change this, use updateSpawnPos().\r\n     */\r\n    public spawnPos: Point;\r\n    /**\r\n     * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\r\n     * \"circle\", \"burst\", \"ring\".\r\n     */\r\n    public spawnType: string;\r\n    /**\r\n     * A reference to the emitter function specific to the spawn type.\r\n     */\r\n    protected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\r\n    /**\r\n     * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\r\n     */\r\n    public spawnRect: Rectangle;\r\n    /**\r\n     * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\r\n     */\r\n    public spawnPolygonalChain: PolygonalChain;\r\n    /**\r\n     * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\r\n     */\r\n    public spawnCircle: Circle & {minRadius: number};\r\n    /**\r\n     * Number of particles to spawn time that the frequency allows for particles to spawn.\r\n     */\r\n    public particlesPerWave: number;\r\n    /**\r\n     * Spacing between particles in a burst. 0 gives a random angle for each particle.\r\n     */\r\n    public particleSpacing: number;\r\n    /**\r\n     * Angle at which to start spawning particles in a burst.\r\n     */\r\n    public angleStart: number;\r\n    /**\r\n     * Rotation of the emitter or emitter's owner in degrees. This is added to\r\n     * the calculated spawn angle.\r\n     * To change this, use rotate().\r\n     */\r\n    protected rotation: number;\r\n    /**\r\n     * The world position of the emitter's owner, to add spawnPos to when\r\n     * spawning particles. To change this, use updateOwnerPos().\r\n     */\r\n    protected ownerPos: Point;\r\n    /**\r\n     * The origin + spawnPos in the previous update, so that the spawn position\r\n     * can be interpolated to space out particles better.\r\n     */\r\n    protected _prevEmitterPos: Point;\r\n    /**\r\n     * If _prevEmitterPos is valid, to prevent interpolation on the first update\r\n     */\r\n    protected _prevPosIsValid: boolean;\r\n    /**\r\n     * If either ownerPos or spawnPos has changed since the previous update.\r\n     */\r\n    protected _posChanged: boolean;\r\n    /**\r\n     * The container to add particles to.\r\n     */\r\n    protected _parent: Container;\r\n    /**\r\n     * If particles should be added at the back of the display list instead of the front.\r\n     */\r\n    public addAtBack: boolean;\r\n    /**\r\n     * The current number of active particles.\r\n     */\r\n    public particleCount: number;\r\n    /**\r\n     * If particles should be emitted during update() calls. Setting this to false\r\n     * stops new particles from being created, but allows existing ones to die out.\r\n     */\r\n    protected _emit: boolean;\r\n    /**\r\n     * The timer for when to spawn particles in seconds, where numbers less\r\n     * than 0 mean that particles should be spawned.\r\n     */\r\n    protected _spawnTimer: number;\r\n    /**\r\n     * The life of the emitter in seconds.\r\n     */\r\n    protected _emitterLife: number;\r\n    /**\r\n     * The particles that are active and on the display list. This is the first particle in a\r\n     * linked list.\r\n     */\r\n    protected _activeParticlesFirst: Particle;\r\n    /**\r\n     * The particles that are active and on the display list. This is the last particle in a\r\n     * linked list.\r\n     */\r\n    protected _activeParticlesLast: Particle;\r\n    /**\r\n     * The particles that are not currently being used. This is the first particle in a\r\n     * linked list.\r\n     */\r\n    protected _poolFirst: Particle;\r\n    /**\r\n     * The original config object that this emitter was initialized with.\r\n     */\r\n    protected _origConfig: any;\r\n    /**\r\n     * The original particle image data that this emitter was initialized with.\r\n     */\r\n    protected _origArt: any;\r\n    /**\r\n     * If the update function is called automatically from the shared ticker.\r\n     * Setting this to false requires calling the update function manually.\r\n     */\r\n    protected _autoUpdate: boolean;\r\n    /**\r\n     * A number keeping index of currently applied image. Used to emit arts in order.\r\n     */\r\n    protected _currentImageIndex = -1;\r\n    /**\r\n     * If the emitter should destroy itself when all particles have died out. This is set by\r\n     * playOnceAndDestroy();\r\n     */\r\n    protected _destroyWhenComplete: boolean;\r\n    /**\r\n     * A callback for when all particles have died out. This is set by\r\n     * playOnceAndDestroy() or playOnce();\r\n     */\r\n    protected _completeCallback: () => void;\r\n\r\n    /**\r\n     * @param particleParent The container to add the particles to.\r\n     * @param particleImages A texture or array of textures to use\r\n     *                       for the particles. Strings will be turned\r\n     *                       into textures via Texture.fromImage().\r\n     * @param config A configuration object containing settings for the emitter.\r\n     * @param config.emit If config.emit is explicitly passed as false, the\r\n     *                    Emitter will start disabled.\r\n     * @param config.autoUpdate If config.autoUpdate is explicitly passed as\r\n     *                          true, the Emitter will automatically call\r\n     *                          update via the PIXI shared ticker.\r\n     */\r\n    constructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\r\n    {\r\n        this._particleConstructor = Particle;\r\n        // properties for individual particles\r\n        this.particleImages = null;\r\n        this.startAlpha = null;\r\n        this.startSpeed = null;\r\n        this.minimumSpeedMultiplier = 1;\r\n        this.acceleration = null;\r\n        this.maxSpeed = NaN;\r\n        this.startScale = null;\r\n        this.minimumScaleMultiplier = 1;\r\n        this.startColor = null;\r\n        this.minLifetime = 0;\r\n        this.maxLifetime = 0;\r\n        this.minStartRotation = 0;\r\n        this.maxStartRotation = 0;\r\n        this.noRotation = false;\r\n        this.minRotationSpeed = 0;\r\n        this.maxRotationSpeed = 0;\r\n        this.particleBlendMode = 0;\r\n        this.customEase = null;\r\n        this.extraData = null;\r\n        // properties for spawning particles\r\n        this._frequency = 1;\r\n        this.spawnChance = 1;\r\n        this.maxParticles = 1000;\r\n        this.emitterLifetime = -1;\r\n        this.spawnPos = null;\r\n        this.spawnType = null;\r\n        this._spawnFunc = null;\r\n        this.spawnRect = null;\r\n        this.spawnCircle = null;\r\n        this.spawnPolygonalChain = null;\r\n        this.particlesPerWave = 1;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        // emitter properties\r\n        this.rotation = 0;\r\n        this.ownerPos = null;\r\n        this._prevEmitterPos = null;\r\n        this._prevPosIsValid = false;\r\n        this._posChanged = false;\r\n        this._parent = null;\r\n        this.addAtBack = false;\r\n        this.particleCount = 0;\r\n        this._emit = false;\r\n        this._spawnTimer = 0;\r\n        this._emitterLife = -1;\r\n        this._activeParticlesFirst = null;\r\n        this._activeParticlesLast = null;\r\n        this._poolFirst = null;\r\n        this._origConfig = null;\r\n        this._origArt = null;\r\n        this._autoUpdate = false;\r\n        this._currentImageIndex = -1;\r\n        this._destroyWhenComplete = false;\r\n        this._completeCallback = null;\r\n\r\n        // set the initial parent\r\n        this.parent = particleParent;\r\n\r\n        if (particleImages && config)\r\n        {\r\n            this.init(particleImages, config);\r\n        }\r\n\r\n        // save often used functions on the instance instead of the prototype for better speed\r\n        this.recycle = this.recycle;\r\n        this.update = this.update;\r\n        this.rotate = this.rotate;\r\n        this.updateSpawnPos = this.updateSpawnPos;\r\n        this.updateOwnerPos = this.updateOwnerPos;\r\n    }\r\n\r\n    /**\r\n     * If the emitter is using particle art in order as provided in `particleImages`.\r\n     * Effective only when `particleImages` has multiple art options.\r\n     * This is particularly useful ensuring that each art shows up once, in case you need to emit a body in an order.\r\n     * For example: dragon - [Head, body1, body2, ..., tail]\r\n     */\r\n    public get orderedArt(): boolean { return this._currentImageIndex !== -1; }\r\n    public set orderedArt(value)\r\n    {\r\n        this._currentImageIndex = value ? 0 : -1;\r\n    }\r\n\r\n    /**\r\n     * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n     * it will be set to 1 (particle per second) to prevent infinite loops.\r\n     */\r\n    public get frequency(): number { return this._frequency; }\r\n    public set frequency(value)\r\n    {\r\n        // do some error checking to prevent infinite loops\r\n        if (typeof value === 'number' && value > 0)\r\n        {\r\n            this._frequency = value;\r\n        }\r\n        else\r\n        {\r\n            this._frequency = 1;\r\n        }\r\n    }\r\n    /**\r\n     * The constructor used to create new particles. The default is\r\n     * the built in Particle class. Setting this will dump any active or\r\n     * pooled particles, if the emitter has already been used.\r\n     */\r\n    public get particleConstructor(): typeof Particle { return this._particleConstructor; }\r\n    public set particleConstructor(value)\r\n    {\r\n        if (value !== this._particleConstructor)\r\n        {\r\n            this._particleConstructor = value;\r\n            // clean up existing particles\r\n            this.cleanup();\r\n            // scrap all the particles\r\n            for (let particle = this._poolFirst; particle; particle = particle.next)\r\n            {\r\n                particle.destroy();\r\n            }\r\n            this._poolFirst = null;\r\n            // re-initialize the emitter so that the new constructor can do anything it needs to\r\n            if (this._origConfig && this._origArt)\r\n            {\r\n                this.init(this._origArt, this._origConfig);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * The container to add particles to. Settings this will dump any active particles.\r\n    */\r\n    public get parent(): Container { return this._parent; }\r\n    public set parent(value)\r\n    {\r\n        this.cleanup();\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Sets up the emitter based on the config settings.\r\n     * @param art A texture or array of textures to use for the particles.\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    public init(art: any, config: EmitterConfig|OldEmitterConfig): void\r\n    {\r\n        if (!art || !config)\r\n        {\r\n            return;\r\n        }\r\n        // clean up any existing particles\r\n        this.cleanup();\r\n\r\n        // store the original config and particle images, in case we need to re-initialize\r\n        // when the particle constructor is changed\r\n        this._origConfig = config;\r\n        this._origArt = art;\r\n\r\n        // set up the array of data, also ensuring that it is an array\r\n        art = Array.isArray(art) ? art.slice() : [art];\r\n        // run the art through the particle class's parsing function\r\n        const partClass = this._particleConstructor;\r\n\r\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n        // /////////////////////////\r\n        // Particle Properties   //\r\n        // /////////////////////////\r\n        // set up the alpha\r\n        if (config.alpha)\r\n        {\r\n            this.startAlpha = PropertyNode.createList(config.alpha);\r\n        }\r\n        else\r\n        {\r\n            this.startAlpha = new PropertyNode(1, 0);\r\n        }\r\n        // set up the speed\r\n        if (config.speed)\r\n        {\r\n            this.startSpeed = PropertyNode.createList(config.speed);\r\n            // eslint-disable-next-line max-len\r\n            this.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\r\n        }\r\n        else\r\n        {\r\n            this.minimumSpeedMultiplier = 1;\r\n            this.startSpeed = new PropertyNode(0, 0);\r\n        }\r\n        // set up acceleration\r\n        const acceleration = config.acceleration;\r\n\r\n        if (acceleration && (acceleration.x || acceleration.y))\r\n        {\r\n            // make sure we disable speed interpolation\r\n            this.startSpeed.next = null;\r\n            this.acceleration = new Point(acceleration.x, acceleration.y);\r\n            this.maxSpeed = config.maxSpeed || NaN;\r\n        }\r\n        else\r\n        {\r\n            this.acceleration = new Point();\r\n        }\r\n        // set up the scale\r\n        if (config.scale)\r\n        {\r\n            this.startScale = PropertyNode.createList(config.scale);\r\n            // eslint-disable-next-line max-len\r\n            this.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\r\n        }\r\n        else\r\n        {\r\n            this.startScale = new PropertyNode(1, 0);\r\n            this.minimumScaleMultiplier = 1;\r\n        }\r\n        // set up the color\r\n        if (config.color)\r\n        {\r\n            this.startColor = PropertyNode.createList(config.color);\r\n        }\r\n        else\r\n        {\r\n            this.startColor = new PropertyNode({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\r\n        }\r\n        // set up the start rotation\r\n        if (config.startRotation)\r\n        {\r\n            this.minStartRotation = config.startRotation.min;\r\n            this.maxStartRotation = config.startRotation.max;\r\n        }\r\n        else\r\n        {\r\n            this.minStartRotation = this.maxStartRotation = 0;\r\n        }\r\n        if (config.noRotation\r\n    && (this.minStartRotation || this.maxStartRotation))\r\n        {\r\n            this.noRotation = !!config.noRotation;\r\n        }\r\n        else\r\n        {\r\n            this.noRotation = false;\r\n        }\r\n        // set up the rotation speed\r\n        if (config.rotationSpeed)\r\n        {\r\n            this.minRotationSpeed = config.rotationSpeed.min;\r\n            this.maxRotationSpeed = config.rotationSpeed.max;\r\n        }\r\n        else\r\n        {\r\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\r\n        }\r\n\r\n        this.rotationAcceleration = config.rotationAcceleration || 0;\r\n        // set up the lifetime\r\n        this.minLifetime = config.lifetime.min;\r\n        this.maxLifetime = config.lifetime.max;\r\n        // get the blend mode\r\n        this.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\r\n        // use the custom ease if provided\r\n        if (config.ease)\r\n        {\r\n            this.customEase = typeof config.ease === 'function'\r\n                ? config.ease : ParticleUtils.generateEase(config.ease);\r\n        }\r\n        else\r\n        {\r\n            this.customEase = null;\r\n        }\r\n        // set up the extra data, running it through the particle class's parseData function.\r\n        if (partClass.parseData)\r\n        {\r\n            this.extraData = partClass.parseData(config.extraData);\r\n        }\r\n        else\r\n        {\r\n            this.extraData = config.extraData || null;\r\n        }\r\n        // ////////////////////////\r\n        // Emitter Properties   //\r\n        // ////////////////////////\r\n        // reset spawn type specific settings\r\n        this.spawnRect = this.spawnCircle = null;\r\n        this.particlesPerWave = 1;\r\n        if (config.particlesPerWave && config.particlesPerWave > 1)\r\n        {\r\n            this.particlesPerWave = config.particlesPerWave;\r\n        }\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        // determine the spawn function to use\r\n        this.parseSpawnType(config);\r\n        // set the spawning frequency\r\n        this.frequency = config.frequency;\r\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n        // set the emitter lifetime\r\n        this.emitterLifetime = config.emitterLifetime || -1;\r\n        // set the max particles\r\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n        // determine if we should add the particle at the back of the list or not\r\n        this.addAtBack = !!config.addAtBack;\r\n        // reset the emitter position and rotation variables\r\n        this.rotation = 0;\r\n        this.ownerPos = new Point();\r\n        this.spawnPos = new Point(config.pos.x, config.pos.y);\r\n\r\n        this.initAdditional(art, config);\r\n\r\n        this._prevEmitterPos = this.spawnPos.clone();\r\n        // previous emitter position is invalid and should not be used for interpolation\r\n        this._prevPosIsValid = false;\r\n        // start emitting\r\n        this._spawnTimer = 0;\r\n        this.emit = config.emit === undefined ? true : !!config.emit;\r\n        this.autoUpdate = !!config.autoUpdate;\r\n        this.orderedArt = !!config.orderedArt;\r\n    }\r\n\r\n    /**\r\n     * Sets up additional parameters to the emitter from config settings.\r\n     * Using for parsing additional parameters on classes that extend from Emitter\r\n     * @param art A texture or array of textures to use for the particles.\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig): void\r\n    {\r\n        // override in subclasses\r\n    }\r\n\r\n    /**\r\n     * Parsing emitter spawn type from config settings.\r\n     * Place for override and add new kind of spawn type\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    protected parseSpawnType(config: EmitterConfig|OldEmitterConfig): void\r\n    {\r\n        let spawnCircle;\r\n\r\n        switch (config.spawnType)\r\n        {\r\n            case 'rect':\r\n                this.spawnType = 'rect';\r\n                this._spawnFunc = this._spawnRect;\r\n                const spawnRect = config.spawnRect;\r\n\r\n                this.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n                break;\r\n            case 'circle':\r\n                this.spawnType = 'circle';\r\n                this._spawnFunc = this._spawnCircle;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n                break;\r\n            case 'ring':\r\n                this.spawnType = 'ring';\r\n                this._spawnFunc = this._spawnRing;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n                this.spawnCircle.minRadius = spawnCircle.minR;\r\n                break;\r\n            case 'burst':\r\n                this.spawnType = 'burst';\r\n                this._spawnFunc = this._spawnBurst;\r\n                this.particleSpacing = config.particleSpacing;\r\n                this.angleStart = config.angleStart ? config.angleStart : 0;\r\n                break;\r\n            case 'point':\r\n                this.spawnType = 'point';\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n            case 'polygonalChain':\r\n                this.spawnType = 'polygonalChain';\r\n                this._spawnFunc = this._spawnPolygonalChain;\r\n                this.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\r\n                break;\r\n            default:\r\n                this.spawnType = 'point';\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recycles an individual particle. For internal use only.\r\n     * @param particle The particle to recycle.\r\n     * @internal\r\n     */\r\n    public recycle(particle: Particle): void\r\n    {\r\n        if (particle.next)\r\n        {\r\n            particle.next.prev = particle.prev;\r\n        }\r\n        if (particle.prev)\r\n        {\r\n            particle.prev.next = particle.next;\r\n        }\r\n        if (particle === this._activeParticlesLast)\r\n        {\r\n            this._activeParticlesLast = particle.prev;\r\n        }\r\n        if (particle === this._activeParticlesFirst)\r\n        {\r\n            this._activeParticlesFirst = particle.next;\r\n        }\r\n        // add to pool\r\n        particle.prev = null;\r\n        particle.next = this._poolFirst;\r\n        this._poolFirst = particle;\r\n        // remove child from display, or make it invisible if it is in a ParticleContainer\r\n        if (particle.parent)\r\n        {\r\n            particle.parent.removeChild(particle);\r\n        }\r\n        // decrease count\r\n        --this.particleCount;\r\n    }\r\n\r\n    /**\r\n     * Sets the rotation of the emitter to a new value.\r\n     * @param newRot The new rotation, in degrees.\r\n     */\r\n    public rotate(newRot: number): void\r\n    {\r\n        if (this.rotation === newRot) return;\r\n        // caclulate the difference in rotation for rotating spawnPos\r\n        const diff = newRot - this.rotation;\r\n\r\n        this.rotation = newRot;\r\n        // rotate spawnPos\r\n        ParticleUtils.rotatePoint(diff, this.spawnPos);\r\n        // mark the position as having changed\r\n        this._posChanged = true;\r\n    }\r\n\r\n    /**\r\n     * Changes the spawn position of the emitter.\r\n     * @param x The new x value of the spawn position for the emitter.\r\n     * @param y The new y value of the spawn position for the emitter.\r\n     */\r\n    public updateSpawnPos(x: number, y: number): void\r\n    {\r\n        this._posChanged = true;\r\n        this.spawnPos.x = x;\r\n        this.spawnPos.y = y;\r\n    }\r\n\r\n    /**\r\n     * Changes the position of the emitter's owner. You should call this if you are adding\r\n     * particles to the world container that your emitter's owner is moving around in.\r\n     * @param x The new x value of the emitter's owner.\r\n     * @param y The new y value of the emitter's owner.\r\n     */\r\n    public updateOwnerPos(x: number, y: number): void\r\n    {\r\n        this._posChanged = true;\r\n        this.ownerPos.x = x;\r\n        this.ownerPos.y = y;\r\n    }\r\n\r\n    /**\r\n     * Prevents emitter position interpolation in the next update.\r\n     * This should be used if you made a major position change of your emitter's owner\r\n     * that was not normal movement.\r\n     */\r\n    public resetPositionTracking(): void\r\n    {\r\n        this._prevPosIsValid = false;\r\n    }\r\n\r\n    /**\r\n     * If particles should be emitted during update() calls. Setting this to false\r\n     * stops new particles from being created, but allows existing ones to die out.\r\n     */\r\n    public get emit(): boolean { return this._emit; }\r\n    public set emit(value)\r\n    {\r\n        this._emit = !!value;\r\n        this._emitterLife = this.emitterLifetime;\r\n    }\r\n\r\n    /**\r\n     * If the update function is called automatically from the shared ticker.\r\n     * Setting this to false requires calling the update function manually.\r\n     */\r\n    public get autoUpdate(): boolean { return this._autoUpdate; }\r\n    public set autoUpdate(value)\r\n    {\r\n        if (this._autoUpdate && !value)\r\n        {\r\n            ticker.remove(this.update, this);\r\n        }\r\n        else if (!this._autoUpdate && value)\r\n        {\r\n            ticker.add(this.update, this);\r\n        }\r\n        this._autoUpdate = !!value;\r\n    }\r\n\r\n    /**\r\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n     * when particle emission is complete.\r\n     * @param callback Callback for when emission is complete (all particles have died off)\r\n     */\r\n    public playOnceAndDestroy(callback?: () => void): void\r\n    {\r\n        this.autoUpdate = true;\r\n        this.emit = true;\r\n        this._destroyWhenComplete = true;\r\n        this._completeCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n     * @param callback Callback for when emission is complete (all particles have died off)\r\n     */\r\n    public playOnce(callback?: () => void): void\r\n    {\r\n        this.emit = true;\r\n        this._completeCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Updates all particles spawned by this emitter and emits new ones.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    public update(delta: number): void\r\n    {\r\n        if (this._autoUpdate)\r\n        {\r\n            delta = delta / settings.TARGET_FPMS / 1000;\r\n        }\r\n\r\n        // if we don't have a parent to add particles to, then don't do anything.\r\n        // this also works as a isDestroyed check\r\n        if (!this._parent) return;\r\n        // update existing particles\r\n        let i;\r\n        let particle;\r\n        let next;\r\n\r\n        for (particle = this._activeParticlesFirst; particle; particle = next)\r\n        {\r\n            next = particle.next;\r\n            particle.update(delta);\r\n        }\r\n        let prevX;\r\n        let prevY;\r\n        // if the previous position is valid, store these for later interpolation\r\n\r\n        if (this._prevPosIsValid)\r\n        {\r\n            prevX = this._prevEmitterPos.x;\r\n            prevY = this._prevEmitterPos.y;\r\n        }\r\n        // store current position of the emitter as local variables\r\n        const curX = this.ownerPos.x + this.spawnPos.x;\r\n        const curY = this.ownerPos.y + this.spawnPos.y;\r\n        // spawn new particles\r\n\r\n        if (this._emit)\r\n        {\r\n            // decrease spawn timer\r\n            this._spawnTimer -= delta < 0 ? 0 : delta;\r\n            // while _spawnTimer < 0, we have particles to spawn\r\n            while (this._spawnTimer <= 0)\r\n            {\r\n                // determine if the emitter should stop spawning\r\n                if (this._emitterLife >= 0)\r\n                {\r\n                    this._emitterLife -= this._frequency;\r\n                    if (this._emitterLife <= 0)\r\n                    {\r\n                        this._spawnTimer = 0;\r\n                        this._emitterLife = 0;\r\n                        this.emit = false;\r\n                        break;\r\n                    }\r\n                }\r\n                // determine if we have hit the particle limit\r\n                if (this.particleCount >= this.maxParticles)\r\n                {\r\n                    this._spawnTimer += this._frequency;\r\n                    continue;\r\n                }\r\n                // determine the particle lifetime\r\n                let lifetime;\r\n\r\n                if (this.minLifetime === this.maxLifetime)\r\n                {\r\n                    lifetime = this.minLifetime;\r\n                }\r\n                else\r\n                {\r\n                    lifetime = (Math.random() * (this.maxLifetime - this.minLifetime)) + this.minLifetime;\r\n                }\r\n                // only make the particle if it wouldn't immediately destroy itself\r\n                if (-this._spawnTimer < lifetime)\r\n                {\r\n                    // If the position has changed and this isn't the first spawn,\r\n                    // interpolate the spawn position\r\n                    let emitPosX; let\r\n                        emitPosY;\r\n\r\n                    if (this._prevPosIsValid && this._posChanged)\r\n                    {\r\n                        // 1 - _spawnTimer / delta, but _spawnTimer is negative\r\n                        const lerp = 1 + (this._spawnTimer / delta);\r\n\r\n                        emitPosX = ((curX - prevX) * lerp) + prevX;\r\n                        emitPosY = ((curY - prevY) * lerp) + prevY;\r\n                    }\r\n                    else// otherwise just set to the spawn position\r\n                    {\r\n                        emitPosX = curX;\r\n                        emitPosY = curY;\r\n                    }\r\n                    // create enough particles to fill the wave (non-burst types have a wave of 1)\r\n                    i = 0;\r\n                    for (let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\r\n                    {\r\n                        // see if we actually spawn one\r\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        // create particle\r\n                        let p;\r\n\r\n                        if (this._poolFirst)\r\n                        {\r\n                            p = this._poolFirst;\r\n                            this._poolFirst = this._poolFirst.next;\r\n                            p.next = null;\r\n                        }\r\n                        else\r\n                        {\r\n                            p = new this.particleConstructor(this);\r\n                        }\r\n\r\n                        // set a random texture if we have more than one\r\n                        if (this.particleImages.length > 1)\r\n                        {\r\n                            // if using ordered art\r\n                            if (this._currentImageIndex !== -1)\r\n                            {\r\n                                // get current art index, then increment for the next particle\r\n                                p.applyArt(this.particleImages[this._currentImageIndex++]);\r\n                                // loop around if needed\r\n                                if (this._currentImageIndex < 0 || this._currentImageIndex >= this.particleImages.length)\r\n                                {\r\n                                    this._currentImageIndex = 0;\r\n                                }\r\n                            }\r\n                            // otherwise grab a random one\r\n                            else\r\n                            {\r\n                                p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            // if they are actually the same texture, a standard particle\r\n                            // will quit early from the texture setting in setTexture().\r\n                            p.applyArt(this.particleImages[0]);\r\n                        }\r\n                        // set up the start and end values\r\n                        p.alphaList.reset(this.startAlpha);\r\n                        if (this.minimumSpeedMultiplier !== 1)\r\n                        {\r\n                            // eslint-disable-next-line max-len\r\n                            p.speedMultiplier = (Math.random() * (1 - this.minimumSpeedMultiplier)) + this.minimumSpeedMultiplier;\r\n                        }\r\n                        p.speedList.reset(this.startSpeed);\r\n                        p.acceleration.x = this.acceleration.x;\r\n                        p.acceleration.y = this.acceleration.y;\r\n                        p.maxSpeed = this.maxSpeed;\r\n                        if (this.minimumScaleMultiplier !== 1)\r\n                        {\r\n                            // eslint-disable-next-line max-len\r\n                            p.scaleMultiplier = (Math.random() * (1 - this.minimumScaleMultiplier)) + this.minimumScaleMultiplier;\r\n                        }\r\n                        p.scaleList.reset(this.startScale);\r\n                        p.colorList.reset(this.startColor);\r\n                        // randomize the rotation speed\r\n                        if (this.minRotationSpeed === this.maxRotationSpeed)\r\n                        {\r\n                            p.rotationSpeed = this.minRotationSpeed;\r\n                        }\r\n                        else\r\n                        {\r\n                            // eslint-disable-next-line max-len\r\n                            p.rotationSpeed = (Math.random() * (this.maxRotationSpeed - this.minRotationSpeed)) + this.minRotationSpeed;\r\n                        }\r\n                        p.rotationAcceleration = this.rotationAcceleration;\r\n                        p.noRotation = this.noRotation;\r\n                        // set up the lifetime\r\n                        p.maxLife = lifetime;\r\n                        // set the blend mode\r\n                        p.blendMode = this.particleBlendMode;\r\n                        // set the custom ease, if any\r\n                        p.ease = this.customEase;\r\n                        // set the extra data, if any\r\n                        p.extraData = this.extraData;\r\n                        // set additional properties to particle\r\n                        this.applyAdditionalProperties(p);\r\n                        // call the proper function to handle rotation and position of particle\r\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\r\n                        // initialize particle\r\n                        p.init();\r\n                        // add the particle to the display list\r\n                        if (this.addAtBack)\r\n                        {\r\n                            this._parent.addChildAt(p, 0);\r\n                        }\r\n                        else\r\n                        {\r\n                            this._parent.addChild(p);\r\n                        }\r\n                        // add particle to list of active particles\r\n                        if (this._activeParticlesLast)\r\n                        {\r\n                            this._activeParticlesLast.next = p;\r\n                            p.prev = this._activeParticlesLast;\r\n                            this._activeParticlesLast = p;\r\n                        }\r\n                        else\r\n                        {\r\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\r\n                        }\r\n                        ++this.particleCount;\r\n                        // update the particle by the time passed, so the particles are spread out properly\r\n                        p.update(-this._spawnTimer);// we want a positive delta, because a negative delta messes things up\r\n                    }\r\n                }\r\n                // increase timer and continue on to any other particles that need to be created\r\n                this._spawnTimer += this._frequency;\r\n            }\r\n        }\r\n        // if the position changed before this update, then keep track of that\r\n        if (this._posChanged)\r\n        {\r\n            this._prevEmitterPos.x = curX;\r\n            this._prevEmitterPos.y = curY;\r\n            this._prevPosIsValid = true;\r\n            this._posChanged = false;\r\n        }\r\n\r\n        // if we are all done and should destroy ourselves, take care of that\r\n        if (!this._emit && !this._activeParticlesFirst)\r\n        {\r\n            if (this._completeCallback)\r\n            {\r\n                const cb = this._completeCallback;\r\n\r\n                this._completeCallback = null;\r\n                cb();\r\n            }\r\n            if (this._destroyWhenComplete)\r\n            {\r\n                this.destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set additional properties to new particle.\r\n     * Using on classes that extend from Emitter\r\n     * @param p The particle\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected applyAdditionalProperties(p: Particle): void\r\n    {\r\n        // for override in subclass\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for a point type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    protected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number): void\r\n    {\r\n        // set the initial rotation/direction of the particle based on\r\n        // starting particle angle and rotation of emitter\r\n        if (this.minStartRotation === this.maxStartRotation)\r\n        {\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        }\r\n        else\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\r\n        }\r\n        // drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for a rectangle type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    protected _spawnRect(p: Particle, emitPosX: number, emitPosY: number): void\r\n    {\r\n        // set the initial rotation/direction of the particle based on starting\r\n        // particle angle and rotation of emitter\r\n        if (this.minStartRotation === this.maxStartRotation)\r\n        {\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        }\r\n        else\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\r\n        }\r\n        // place the particle at a random point in the rectangle\r\n        helperPoint.x = (Math.random() * this.spawnRect.width) + this.spawnRect.x;\r\n        helperPoint.y = (Math.random() * this.spawnRect.height) + this.spawnRect.y;\r\n        if (this.rotation !== 0)\r\n        {\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        }\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for a circle type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    protected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number): void\r\n    {\r\n        // set the initial rotation/direction of the particle based on starting\r\n        // particle angle and rotation of emitter\r\n        if (this.minStartRotation === this.maxStartRotation)\r\n        {\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        }\r\n        else\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\r\n        }\r\n        // place the particle at a random radius in the circle\r\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        // rotate the point to a random angle in the circle\r\n        ParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\r\n        // offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        // rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n        {\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        }\r\n        // set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for a ring type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    protected _spawnRing(p: Particle, emitPosX: number, emitPosY: number): void\r\n    {\r\n        const spawnCircle = this.spawnCircle;\r\n        // set the initial rotation/direction of the particle based on starting\r\n        // particle angle and rotation of emitter\r\n\r\n        if (this.minStartRotation === this.maxStartRotation)\r\n        {\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        }\r\n        else\r\n        {\r\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation))\r\n    + this.minStartRotation + this.rotation;\r\n        }\r\n        // place the particle at a random radius in the ring\r\n        if (spawnCircle.minRadius !== spawnCircle.radius)\r\n        {\r\n            helperPoint.x = (Math.random() * (spawnCircle.radius - spawnCircle.minRadius))\r\n    + spawnCircle.minRadius;\r\n        }\r\n        else\r\n        {\r\n            helperPoint.x = spawnCircle.radius;\r\n        }\r\n        helperPoint.y = 0;\r\n        // rotate the point to a random angle in the circle\r\n        const angle = Math.random() * 360;\r\n\r\n        p.rotation += angle;\r\n        ParticleUtils.rotatePoint(angle, helperPoint);\r\n        // offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        // rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n        {\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        }\r\n        // set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for polygonal chain.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    protected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number): void\r\n    {\r\n        // set the initial rotation/direction of the particle based on starting\r\n        // particle angle and rotation of emitter\r\n        if (this.minStartRotation === this.maxStartRotation)\r\n        {\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        }\r\n        else\r\n        {\r\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation))\r\n    + this.minStartRotation + this.rotation;\r\n        }\r\n        // get random point on the polygon chain\r\n        this.spawnPolygonalChain.getRandomPoint(helperPoint);\r\n        // rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n        {\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        }\r\n        // set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    }\r\n\r\n    /**\r\n     * Positions a particle for a burst type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave.\r\n     */\r\n    protected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number): void\r\n    {\r\n        // set the initial rotation/direction of the particle based on spawn\r\n        // angle and rotation of emitter\r\n        if (this.particleSpacing === 0)\r\n        {\r\n            p.rotation = Math.random() * 360;\r\n        }\r\n        else\r\n        {\r\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n        }\r\n        // drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    }\r\n\r\n    /**\r\n     * Kills all active particles immediately.\r\n     */\r\n    public cleanup(): void\r\n    {\r\n        let particle;\r\n        let next;\r\n\r\n        for (particle = this._activeParticlesFirst; particle; particle = next)\r\n        {\r\n            next = particle.next;\r\n            this.recycle(particle);\r\n            if (particle.parent)\r\n            {\r\n                particle.parent.removeChild(particle);\r\n            }\r\n        }\r\n        this._activeParticlesFirst = this._activeParticlesLast = null;\r\n        this.particleCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Destroys the emitter and all of its particles.\r\n     */\r\n    public destroy(): void\r\n    {\r\n        // make sure we aren't still listening to any tickers\r\n        this.autoUpdate = false;\r\n        // puts all active particles in the pool, and removes them from the particle parent\r\n        this.cleanup();\r\n        // wipe the pool clean\r\n        let next;\r\n\r\n        for (let particle = this._poolFirst; particle; particle = next)\r\n        {\r\n            // store next value so we don't lose it in our destroy call\r\n            next = particle.next;\r\n            particle.destroy();\r\n        }\r\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos\r\n            = this.startColor = this.startScale = this.startAlpha = this.startSpeed\r\n            = this.customEase = this._completeCallback = null;\r\n    }\r\n}\r\n","import { ParticleUtils } from './ParticleUtils';\r\nimport { Particle } from './Particle';\r\nimport { Emitter } from './Emitter';\r\nimport { Texture } from '@pixi/core';\r\nimport { Point } from '@pixi/math';\r\n\r\n/**\r\n * A helper point for math things.\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A hand picked list of Math functions (and a couple properties) that are\r\n * allowable. They should be used without the preceding \"Math.\"\r\n * @hidden\r\n */\r\nconst MATH_FUNCS = [\r\n    'pow',\r\n    'sqrt',\r\n    'abs',\r\n    'floor',\r\n    'round',\r\n    'ceil',\r\n    'E',\r\n    'PI',\r\n    'sin',\r\n    'cos',\r\n    'tan',\r\n    'asin',\r\n    'acos',\r\n    'atan',\r\n    'atan2',\r\n    'log',\r\n];\r\n/**\r\n * create an actual regular expression object from the string\r\n * @hidden\r\n */\r\nconst WHITELISTER = new RegExp(\r\n    [\r\n        // Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n        // as 'x', for the variable usage.\r\n        '[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]',\r\n    ].concat(MATH_FUNCS).join('|'),\r\n    'g',\r\n);\r\n\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @hidden\r\n * @param pathString The string to parse.\r\n * @return The path function - takes x, outputs y.\r\n */\r\nfunction parsePath(pathString: string): (x: number) => number\r\n{\r\n    const matches = pathString.match(WHITELISTER);\r\n\r\n    for (let i = matches.length - 1; i >= 0; --i)\r\n    {\r\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n        { matches[i] = `Math.${matches[i]}`; }\r\n    }\r\n    pathString = matches.join('');\r\n\r\n    // eslint-disable-next-line no-new-func\r\n    return new Function('x', `return ${pathString};`) as (x: number) => number;\r\n}\r\n\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n */\r\nexport class PathParticle extends Particle\r\n{\r\n    /**\r\n     * The function representing the path the particle should take.\r\n     */\r\n    public path: Function;\r\n    /**\r\n     * The initial rotation in degrees of the particle, because the direction of the path\r\n     * is based on that.\r\n     */\r\n    public initialRotation: number;\r\n    /**\r\n     * The initial position of the particle, as all path movement is added to that.\r\n     */\r\n    public initialPosition: Point;\r\n    /**\r\n     * Total single directional movement, due to speed.\r\n     */\r\n    public movement: number;\r\n\r\n    /**\r\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n     */\r\n    constructor(emitter: Emitter)\r\n    {\r\n        super(emitter);\r\n        this.path = null;\r\n        this.initialRotation = 0;\r\n        this.initialPosition = new Point();\r\n        this.movement = 0;\r\n    }\r\n\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    public init(): void\r\n    {\r\n        // get initial rotation before it is converted to radians\r\n        this.initialRotation = this.rotation;\r\n        // standard init\r\n        this.Particle_init();\r\n\r\n        // set the path for the particle\r\n        this.path = this.extraData.path;\r\n        // cancel the normal movement behavior\r\n        this._doNormalMovement = !this.path;\r\n        // reset movement\r\n        this.movement = 0;\r\n        // grab position\r\n        this.initialPosition.x = this.position.x;\r\n        this.initialPosition.y = this.position.y;\r\n    }\r\n\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    public update(delta: number): number\r\n    {\r\n        const lerp = this.Particle_update(delta);\r\n        // if the particle died during the update, then don't bother\r\n\r\n        if (lerp >= 0 && this.path)\r\n        {\r\n            // increase linear movement based on speed\r\n            if (this._doSpeed)\r\n            {\r\n                const speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\r\n                this.movement += speed * delta;\r\n            }\r\n            else\r\n            {\r\n                const speed = this.speedList.current.value * this.speedMultiplier;\r\n\r\n                this.movement += speed * delta;\r\n            }\r\n            // set up the helper point for rotation\r\n            helperPoint.x = this.movement;\r\n            helperPoint.y = this.path(this.movement);\r\n            ParticleUtils.rotatePoint(this.initialRotation, helperPoint);\r\n            this.position.x = this.initialPosition.x + helperPoint.x;\r\n            this.position.y = this.initialPosition.y + helperPoint.y;\r\n        }\r\n\r\n        return lerp;\r\n    }\r\n\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    public destroy(): void\r\n    {\r\n        this.Particle_destroy();\r\n        this.path = this.initialPosition = null;\r\n    }\r\n\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n     * @param art The array of art data. For Particle, it should be an array of\r\n     *            Textures. Any strings in the array will be converted to\r\n     *            Textures via Texture.fromImage().\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    public static parseArt(art: (Texture|string)[]): Texture[]\r\n    {\r\n        return Particle.parseArt(art);\r\n    }\r\n\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * PathParticle checks for the existence of path data, and parses the path data for use\r\n     * by particle instances.\r\n     * @param extraData The extra data from the particle config.\r\n     * @return The parsed extra data.\r\n     */\r\n    public static parseData(extraData: {path: string}): any\r\n    {\r\n        const output: any = {};\r\n\r\n        if (extraData && extraData.path)\r\n        {\r\n            try\r\n            {\r\n                output.path = parsePath(extraData.path);\r\n            }\r\n            catch (e)\r\n            {\r\n                if (ParticleUtils.verbose)\r\n                {\r\n                    console.error('PathParticle: error in parsing path expression');\r\n                }\r\n                output.path = null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (ParticleUtils.verbose)\r\n            {\r\n                console.error('PathParticle requires a path string in extraData!');\r\n            }\r\n            output.path = null;\r\n        }\r\n\r\n        return output;\r\n    }\r\n}\r\n","import { Particle } from './Particle';\r\nimport { Emitter } from './Emitter';\r\nimport { GetTextureFromString } from './ParticleUtils';\r\nimport { Texture } from '@pixi/core';\r\n\r\nexport interface ParsedAnimatedParticleArt\r\n{\r\n    textures: Texture[];\r\n    duration: number;\r\n    framerate: number;\r\n    loop: boolean;\r\n}\r\n\r\nexport interface AnimatedParticleArt\r\n{\r\n    framerate: 'matchLife'|number;\r\n    loop?: boolean;\r\n    textures: (string|Texture|{texture: string|Texture;count: number})[];\r\n}\r\n\r\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n * ```typescript\r\n * {\r\n *     //framerate is required. It is the animation speed of the particle in frames per\r\n *     //second.\r\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *     //particle, instead of at a constant framerate. This causes the animation to play\r\n *     //through one time, completing when the particle expires.\r\n *     framerate: 6,\r\n *     //loop is optional, and defaults to false.\r\n *     loop: true,\r\n *     //textures is required, and can be an array of any (non-zero) length.\r\n *     textures: [\r\n *         //each entry represents a single texture that should be used for one or more\r\n *         //frames. Any strings will be converted to Textures with Texture.from().\r\n *         //Instances of PIXI.Texture will be used directly.\r\n *         \"animFrame1.png\",\r\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *         //use that texture for 'count' frames sequentially.\r\n *         {\r\n *             texture: \"animFrame2.png\",\r\n *             count: 3\r\n *         },\r\n *         \"animFrame3.png\"\r\n *     ]\r\n * }\r\n * ```\r\n */\r\nexport class AnimatedParticle extends Particle\r\n{\r\n    /**\r\n     * Texture array used as each frame of animation, similarly to how MovieClip works.\r\n     */\r\n    private textures: Texture[];\r\n\r\n    /**\r\n     * Duration of the animation, in seconds.\r\n     */\r\n    private duration: number;\r\n\r\n    /**\r\n     * Animation framerate, in frames per second.\r\n     */\r\n    private framerate: number;\r\n\r\n    /**\r\n     * Animation time elapsed, in seconds.\r\n     */\r\n    private elapsed: number;\r\n\r\n    /**\r\n     * If this particle animation should loop.\r\n     */\r\n    private loop: boolean;\r\n\r\n    /**\r\n     * @param emitter The emitter that controls this AnimatedParticle.\r\n     */\r\n    constructor(emitter: Emitter)\r\n    {\r\n        super(emitter);\r\n\r\n        this.textures = null;\r\n        this.duration = 0;\r\n        this.framerate = 0;\r\n        this.elapsed = 0;\r\n        this.loop = false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    public init(): void\r\n    {\r\n        this.Particle_init();\r\n\r\n        this.elapsed = 0;\r\n\r\n        // if the animation needs to match the particle's life, then cacluate variables\r\n        if (this.framerate < 0)\r\n        {\r\n            this.duration = this.maxLife;\r\n            this.framerate = this.textures.length / this.duration;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the textures for the particle.\r\n     * @param art An array of PIXI.Texture objects for this animated particle.\r\n     */\r\n    public applyArt(art: ParsedAnimatedParticleArt): void\r\n    {\r\n        this.textures = art.textures;\r\n        this.framerate = art.framerate;\r\n        this.duration = art.duration;\r\n        this.loop = art.loop;\r\n    }\r\n\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    public update(delta: number): number\r\n    {\r\n        const lerp = this.Particle_update(delta);\r\n\r\n        // only animate the particle if it is still alive\r\n        if (lerp >= 0)\r\n        {\r\n            this.elapsed += delta;\r\n            if (this.elapsed >= this.duration)\r\n            {\r\n                // loop elapsed back around\r\n                if (this.loop)\r\n                {\r\n                    this.elapsed = this.elapsed % this.duration;\r\n                }\r\n                // subtract a small amount to prevent attempting to go past the end of the animation\r\n                else\r\n                {\r\n                    this.elapsed = this.duration - 0.000001;\r\n                }\r\n            }\r\n            // add a very small number to the frame and then floor it to avoid\r\n            // the frame being one short due to floating point errors.\r\n            const frame = ((this.elapsed * this.framerate) + 0.0000001) | 0;\r\n\r\n            // in the very rare case that framerate * elapsed math ends up going past the end, use the last texture\r\n            this.texture = this.textures[frame] || this.textures[this.textures.length - 1] || Texture.EMPTY;\r\n        }\r\n\r\n        return lerp;\r\n    }\r\n\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    public destroy(): void\r\n    {\r\n        this.Particle_destroy();\r\n        this.textures = null;\r\n    }\r\n\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @param art The array of art data, properly formatted for AnimatedParticle.\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    public static parseArt(art: AnimatedParticleArt[]): any\r\n    {\r\n        const outArr: ParsedAnimatedParticleArt[] = [];\r\n\r\n        for (let i = 0; i < art.length; ++i)\r\n        {\r\n            const data = art[i];\r\n            const output = outArr[i] = {} as ParsedAnimatedParticleArt;\r\n            const outTextures = output.textures = [] as Texture[];\r\n            const textures = data.textures;\r\n\r\n            for (let j = 0; j < textures.length; ++j)\r\n            {\r\n                let tex = textures[j];\r\n\r\n                if (typeof tex === 'string')\r\n                {\r\n                    outTextures.push(GetTextureFromString(tex));\r\n                }\r\n                else if (tex instanceof Texture)\r\n                {\r\n                    outTextures.push(tex);\r\n                }\r\n                // assume an object with extra data determining duplicate frame data\r\n                else\r\n                {\r\n                    let dupe = tex.count || 1;\r\n\r\n                    if (typeof tex.texture === 'string')\r\n                    {\r\n                        tex = GetTextureFromString(tex.texture);\r\n                    }\r\n                    else// if(tex.texture instanceof Texture)\r\n                    {\r\n                        tex = tex.texture;\r\n                    }\r\n                    for (; dupe > 0; --dupe)\r\n                    {\r\n                        outTextures.push(tex);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // use these values to signify that the animation should match the particle life time.\r\n            if (data.framerate === 'matchLife')\r\n            {\r\n                // -1 means that it should be calculated\r\n                output.framerate = -1;\r\n                output.duration = 0;\r\n                output.loop = false;\r\n            }\r\n            else\r\n            {\r\n                // determine if the animation should loop\r\n                output.loop = !!data.loop;\r\n                // get the framerate, default to 60\r\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\r\n                // determine the duration\r\n                output.duration = outTextures.length / output.framerate;\r\n            }\r\n        }\r\n\r\n        return outArr;\r\n    }\r\n}\r\n","import { Container, DisplayObject } from '@pixi/display';\r\nimport { Renderer, MaskData } from '@pixi/core';\r\nimport { Rectangle } from '@pixi/math';\r\n\r\n/** Interface for a child of a LinkedListContainer (has the prev/next properties added) */\r\nexport interface LinkedListChild extends DisplayObject\r\n{\r\n    nextChild: LinkedListChild|null;\r\n    prevChild: LinkedListChild|null;\r\n}\r\n\r\n/**\r\n * A semi-experimental Container that uses a doubly linked list to manage children instead of an\r\n * array. This means that adding/removing children often is not the same performance hit that\r\n * it would to be continually pushing/splicing.\r\n * However, this is primarily intended to be used for heavy particle usage, and may not handle\r\n * edge cases well if used as a complete Container replacement.\r\n */\r\nexport class LinkedListContainer extends Container\r\n{\r\n    private _firstChild: LinkedListChild|null = null;\r\n    private _lastChild: LinkedListChild|null = null;\r\n    private _childCount = 0;\r\n\r\n    public get firstChild(): LinkedListChild\r\n    {\r\n        return this._firstChild;\r\n    }\r\n\r\n    public get lastChild(): LinkedListChild\r\n    {\r\n        return this._lastChild;\r\n    }\r\n\r\n    public get childCount(): number\r\n    {\r\n        return this._childCount;\r\n    }\r\n\r\n    public addChild<T extends DisplayObject[]>(...children: T): T[0]\r\n    {\r\n        // if there is only one argument we can bypass looping through the them\r\n        if (children.length > 1)\r\n        {\r\n            // loop through the array and add all children\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                // eslint-disable-next-line prefer-rest-params\r\n                this.addChild(children[i]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const child = children[0] as LinkedListChild;\r\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\r\n\r\n            if (child.parent)\r\n            {\r\n                child.parent.removeChild(child);\r\n            }\r\n\r\n            child.parent = this;\r\n            this.sortDirty = true;\r\n\r\n            // ensure child transform will be recalculated\r\n            child.transform._parentID = -1;\r\n\r\n            // add to list if we have a list\r\n            if (this._lastChild)\r\n            {\r\n                this._lastChild.nextChild = child;\r\n                child.prevChild = this._lastChild;\r\n                this._lastChild = child;\r\n            }\r\n            // otherwise initialize the list\r\n            else\r\n            {\r\n                this._firstChild = this._lastChild = child;\r\n            }\r\n\r\n            // update child count\r\n            ++this._childCount;\r\n\r\n            // ensure bounds will be recalculated\r\n            this._boundsID++;\r\n\r\n            // TODO - lets either do all callbacks or all events.. not both!\r\n            this.onChildrenChange();\r\n            this.emit('childAdded', child, this, this._childCount);\r\n            child.emit('added', this);\r\n        }\r\n\r\n        return children[0];\r\n    }\r\n\r\n    public addChildAt<T extends DisplayObject>(child: T, index: number): T\r\n    {\r\n        if (index < 0 || index > this._childCount)\r\n        {\r\n            throw new Error(`addChildAt: The index ${index} supplied is out of bounds ${this._childCount}`);\r\n        }\r\n\r\n        if (child.parent)\r\n        {\r\n            child.parent.removeChild(child);\r\n        }\r\n\r\n        child.parent = this;\r\n        this.sortDirty = true;\r\n\r\n        // ensure child transform will be recalculated\r\n        child.transform._parentID = -1;\r\n\r\n        const c = (child as any) as LinkedListChild;\r\n\r\n        // if no children, do basic initialization\r\n        if (!this._firstChild)\r\n        {\r\n            this._firstChild = this._lastChild = c;\r\n        }\r\n        // add at beginning (back)\r\n        else if (index === 0)\r\n        {\r\n            this._firstChild.prevChild = c;\r\n            c.nextChild = this._firstChild;\r\n            this._firstChild = c;\r\n        }\r\n        // add at end (front)\r\n        else if (index === this._childCount)\r\n        {\r\n            this._lastChild.nextChild = c;\r\n            c.prevChild = this._lastChild;\r\n            this._lastChild = c;\r\n        }\r\n        // otherwise we have to start counting through the children to find the right one\r\n        // - SLOW, only provided to fully support the possibility of use\r\n        else\r\n        {\r\n            let i = 0;\r\n            let target = this._firstChild;\r\n\r\n            while (i < index)\r\n            {\r\n                target = target.nextChild;\r\n                ++i;\r\n            }\r\n            // insert before the target that we found at the specified index\r\n            target.prevChild.nextChild = c;\r\n            c.prevChild = target.prevChild;\r\n            c.nextChild = target;\r\n            target.prevChild = c;\r\n        }\r\n\r\n        // update child count\r\n        ++this._childCount;\r\n\r\n        // ensure bounds will be recalculated\r\n        this._boundsID++;\r\n\r\n        // TODO - lets either do all callbacks or all events.. not both!\r\n        this.onChildrenChange(index);\r\n        child.emit('added', this);\r\n        this.emit('childAdded', child, this, index);\r\n\r\n        return child;\r\n    }\r\n\r\n    /**\r\n     * Adds a child to the container to be rendered below another child.\r\n     *\r\n     * @param child The child to add\r\n     * @param relative - The current child to add the new child relative to.\r\n     * @return The child that was added.\r\n     */\r\n    public addChildBelow<T extends DisplayObject>(child: T, relative: DisplayObject): T\r\n    {\r\n        if (relative.parent !== this)\r\n        {\r\n            throw new Error(`addChildBelow: The relative target must be a child of this parent`);\r\n        }\r\n\r\n        if (child.parent)\r\n        {\r\n            child.parent.removeChild(child);\r\n        }\r\n\r\n        child.parent = this;\r\n        this.sortDirty = true;\r\n\r\n        // ensure child transform will be recalculated\r\n        child.transform._parentID = -1;\r\n\r\n        // insert before the target that we were given\r\n        (relative as LinkedListChild).prevChild.nextChild = (child as any as LinkedListChild);\r\n        (child as any as LinkedListChild).prevChild = (relative as LinkedListChild).prevChild;\r\n        (child as any as LinkedListChild).nextChild = (relative as LinkedListChild);\r\n        (relative as LinkedListChild).prevChild = (child as any as LinkedListChild);\r\n        if (this._firstChild === relative)\r\n        {\r\n            this._firstChild = (child as any as LinkedListChild);\r\n        }\r\n\r\n        // update child count\r\n        ++this._childCount;\r\n\r\n        // ensure bounds will be recalculated\r\n        this._boundsID++;\r\n\r\n        // TODO - lets either do all callbacks or all events.. not both!\r\n        this.onChildrenChange();\r\n        this.emit('childAdded', child, this, this._childCount);\r\n        child.emit('added', this);\r\n\r\n        return child;\r\n    }\r\n\r\n    /**\r\n     * Adds a child to the container to be rendered above another child.\r\n     *\r\n     * @param child The child to add\r\n     * @param relative - The current child to add the new child relative to.\r\n     * @return The child that was added.\r\n     */\r\n    public addChildAbove<T extends DisplayObject>(child: T, relative: DisplayObject): T\r\n    {\r\n        if (relative.parent !== this)\r\n        {\r\n            throw new Error(`addChildBelow: The relative target must be a child of this parent`);\r\n        }\r\n\r\n        if (child.parent)\r\n        {\r\n            child.parent.removeChild(child);\r\n        }\r\n\r\n        child.parent = this;\r\n        this.sortDirty = true;\r\n\r\n        // ensure child transform will be recalculated\r\n        child.transform._parentID = -1;\r\n\r\n        // insert after the target that we were given\r\n        (relative as LinkedListChild).nextChild.prevChild = (child as any as LinkedListChild);\r\n        (child as any as LinkedListChild).nextChild = (relative as LinkedListChild).nextChild;\r\n        (child as any as LinkedListChild).prevChild = (relative as LinkedListChild);\r\n        (relative as LinkedListChild).nextChild = (child as any as LinkedListChild);\r\n        if (this._lastChild === relative)\r\n        {\r\n            this._lastChild = (child as any as LinkedListChild);\r\n        }\r\n\r\n        // update child count\r\n        ++this._childCount;\r\n\r\n        // ensure bounds will be recalculated\r\n        this._boundsID++;\r\n\r\n        // TODO - lets either do all callbacks or all events.. not both!\r\n        this.onChildrenChange();\r\n        this.emit('childAdded', child, this, this._childCount);\r\n        child.emit('added', this);\r\n\r\n        return child;\r\n    }\r\n\r\n    public swapChildren(child: DisplayObject, child2: DisplayObject): void\r\n    {\r\n        if (child === child2 || child.parent !== this || child2.parent !== this)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const { prevChild, nextChild } = (child as LinkedListChild);\r\n\r\n        (child as LinkedListChild).prevChild = (child2 as LinkedListChild).prevChild;\r\n        (child as LinkedListChild).nextChild = (child2 as LinkedListChild).nextChild;\r\n        (child2 as LinkedListChild).prevChild = prevChild;\r\n        (child2 as LinkedListChild).nextChild = nextChild;\r\n\r\n        if (this._firstChild === child)\r\n        {\r\n            this._firstChild = child2 as LinkedListChild;\r\n        }\r\n        else if (this._firstChild === child2)\r\n        {\r\n            this._firstChild = child as LinkedListChild;\r\n        }\r\n        if (this._lastChild === child)\r\n        {\r\n            this._lastChild = child2 as LinkedListChild;\r\n        }\r\n        else if (this._lastChild === child2)\r\n        {\r\n            this._lastChild = child as LinkedListChild;\r\n        }\r\n\r\n        this.onChildrenChange();\r\n    }\r\n\r\n    public getChildIndex(child: DisplayObject): number\r\n    {\r\n        let index = 0;\r\n        let test = this._firstChild;\r\n\r\n        while (test)\r\n        {\r\n            if (test === child)\r\n            {\r\n                break;\r\n            }\r\n            test = test.nextChild;\r\n            ++index;\r\n        }\r\n        if (!test)\r\n        {\r\n            throw new Error('The supplied DisplayObject must be a child of the caller');\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    setChildIndex(child: DisplayObject, index: number): void\r\n    {\r\n        if (index < 0 || index >= this._childCount)\r\n        {\r\n            throw new Error(`The index ${index} supplied is out of bounds ${this._childCount}`);\r\n        }\r\n        if (child.parent !== this)\r\n        {\r\n            throw new Error('The supplied DisplayObject must be a child of the caller');\r\n        }\r\n\r\n        // remove child\r\n        if ((child as LinkedListChild).nextChild)\r\n        {\r\n            (child as LinkedListChild).nextChild.prevChild = (child as LinkedListChild).prevChild;\r\n        }\r\n        if ((child as LinkedListChild).prevChild)\r\n        {\r\n            (child as LinkedListChild).prevChild.nextChild = (child as LinkedListChild).nextChild;\r\n        }\r\n        if (this._firstChild === (child as LinkedListChild))\r\n        {\r\n            this._firstChild = (child as LinkedListChild).nextChild;\r\n        }\r\n        if (this._lastChild === (child as LinkedListChild))\r\n        {\r\n            this._lastChild = (child as LinkedListChild).prevChild;\r\n        }\r\n        (child as LinkedListChild).nextChild = null;\r\n        (child as LinkedListChild).prevChild = null;\r\n\r\n        // do addChildAt\r\n        if (!this._firstChild)\r\n        {\r\n            this._firstChild = this._lastChild = (child as LinkedListChild);\r\n        }\r\n        else if (index === 0)\r\n        {\r\n            this._firstChild.prevChild = (child as LinkedListChild);\r\n            (child as LinkedListChild).nextChild = this._firstChild;\r\n            this._firstChild = (child as LinkedListChild);\r\n        }\r\n        else if (index === this._childCount)\r\n        {\r\n            this._lastChild.nextChild = (child as LinkedListChild);\r\n            (child as LinkedListChild).prevChild = this._lastChild;\r\n            this._lastChild = (child as LinkedListChild);\r\n        }\r\n        else\r\n        {\r\n            let i = 0;\r\n            let target = this._firstChild;\r\n\r\n            while (i < index)\r\n            {\r\n                target = target.nextChild;\r\n                ++i;\r\n            }\r\n            target.prevChild.nextChild = (child as LinkedListChild);\r\n            (child as LinkedListChild).prevChild = target.prevChild;\r\n            (child as LinkedListChild).nextChild = target;\r\n            target.prevChild = (child as LinkedListChild);\r\n        }\r\n\r\n        this.onChildrenChange(index);\r\n    }\r\n\r\n    public removeChild<T extends DisplayObject[]>(...children: T): T[0]\r\n    {\r\n        // if there is only one argument we can bypass looping through the them\r\n        if (children.length > 1)\r\n        {\r\n            // loop through the arguments property and remove all children\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                this.removeChild(children[i]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const child = children[0] as LinkedListChild;\r\n\r\n            // bail if not actually our child\r\n            if (child.parent !== this) return null;\r\n\r\n            child.parent = null;\r\n            // ensure child transform will be recalculated\r\n            child.transform._parentID = -1;\r\n\r\n            // swap out child references\r\n            if (child.nextChild)\r\n            {\r\n                child.nextChild.prevChild = child.prevChild;\r\n            }\r\n            if (child.prevChild)\r\n            {\r\n                child.prevChild.nextChild = child.nextChild;\r\n            }\r\n            if (this._firstChild === child)\r\n            {\r\n                this._firstChild = child.nextChild;\r\n            }\r\n            if (this._lastChild === child)\r\n            {\r\n                this._lastChild = child.prevChild;\r\n            }\r\n            // clear sibling references\r\n            child.nextChild = null;\r\n            child.prevChild = null;\r\n\r\n            // update child count\r\n            --this._childCount;\r\n\r\n            // ensure bounds will be recalculated\r\n            this._boundsID++;\r\n\r\n            // TODO - lets either do all callbacks or all events.. not both!\r\n            this.onChildrenChange();\r\n            child.emit('removed', this);\r\n            this.emit('childRemoved', child, this);\r\n        }\r\n\r\n        return children[0];\r\n    }\r\n\r\n    public getChildAt(index: number): DisplayObject\r\n    {\r\n        if (index < 0 || index >= this._childCount)\r\n        {\r\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\r\n        }\r\n\r\n        if (index === 0)\r\n        {\r\n            return this._firstChild;\r\n        }\r\n        // add at end (front)\r\n        else if (index === this._childCount)\r\n        {\r\n            return this._lastChild;\r\n        }\r\n        // otherwise we have to start counting through the children to find the right one\r\n        // - SLOW, only provided to fully support the possibility of use\r\n        let i = 0;\r\n        let target = this._firstChild;\r\n\r\n        while (i < index)\r\n        {\r\n            target = target.nextChild;\r\n            ++i;\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    public removeChildAt(index: number): DisplayObject\r\n    {\r\n        const child = this.getChildAt(index) as LinkedListChild;\r\n\r\n        // ensure child transform will be recalculated..\r\n        child.parent = null;\r\n        child.transform._parentID = -1;\r\n        // swap out child references\r\n        if (child.nextChild)\r\n        {\r\n            child.nextChild.prevChild = child.prevChild;\r\n        }\r\n        if (child.prevChild)\r\n        {\r\n            child.prevChild.nextChild = child.nextChild;\r\n        }\r\n        if (this._firstChild === child)\r\n        {\r\n            this._firstChild = child.nextChild;\r\n        }\r\n        if (this._lastChild === child)\r\n        {\r\n            this._lastChild = child.prevChild;\r\n        }\r\n        // clear sibling references\r\n        child.nextChild = null;\r\n        child.prevChild = null;\r\n\r\n        // update child count\r\n        --this._childCount;\r\n\r\n        // ensure bounds will be recalculated\r\n        this._boundsID++;\r\n\r\n        // TODO - lets either do all callbacks or all events.. not both!\r\n        this.onChildrenChange(index);\r\n        child.emit('removed', this);\r\n        this.emit('childRemoved', child, this, index);\r\n\r\n        return child;\r\n    }\r\n\r\n    public removeChildren(beginIndex = 0, endIndex = this._childCount): DisplayObject[]\r\n    {\r\n        const begin = beginIndex;\r\n        const end = endIndex;\r\n        const range = end - begin;\r\n\r\n        if (range > 0 && range <= end)\r\n        {\r\n            const removed: LinkedListChild[] = [];\r\n            let child = this._firstChild;\r\n\r\n            for (let i = 0; i <= end && child; ++i, child = child.nextChild)\r\n            {\r\n                if (i >= begin)\r\n                {\r\n                    removed.push(child);\r\n                }\r\n            }\r\n\r\n            // child before removed section\r\n            const prevChild = removed[0].prevChild;\r\n            // child after removed section\r\n            const nextChild = removed[removed.length - 1].nextChild;\r\n\r\n            if (!nextChild)\r\n            {\r\n                // if we removed the last child, then the new last child is the one before\r\n                // the removed section\r\n                this._lastChild = prevChild;\r\n            }\r\n            else\r\n            {\r\n                // otherwise, stitch the child before the section to the child after\r\n                nextChild.prevChild = prevChild;\r\n            }\r\n            if (!prevChild)\r\n            {\r\n                // if we removed the first child, then the new first child is the one after\r\n                // the removed section\r\n                this._firstChild = nextChild;\r\n            }\r\n            else\r\n            {\r\n                // otherwise stich the child after the section to the one before\r\n                prevChild.nextChild = nextChild;\r\n            }\r\n\r\n            for (let i = 0; i < removed.length; ++i)\r\n            {\r\n                // clear parenting and sibling references for all removed children\r\n                removed[i].parent = null;\r\n                if (removed[i].transform)\r\n                {\r\n                    removed[i].transform._parentID = -1;\r\n                }\r\n                removed[i].nextChild = null;\r\n                removed[i].prevChild = null;\r\n            }\r\n\r\n            this._boundsID++;\r\n\r\n            this.onChildrenChange(beginIndex);\r\n\r\n            for (let i = 0; i < removed.length; ++i)\r\n            {\r\n                removed[i].emit('removed', this);\r\n                this.emit('childRemoved', removed[i], this, i);\r\n            }\r\n\r\n            return removed;\r\n        }\r\n        else if (range === 0 && this._childCount === 0)\r\n        {\r\n            return [];\r\n        }\r\n\r\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\r\n    }\r\n\r\n    /**\r\n     * Updates the transform on all children of this container for rendering.\r\n     * Copied from and overrides PixiJS v5 method (v4 method is identical)\r\n     */\r\n    updateTransform(): void\r\n    {\r\n        this._boundsID++;\r\n\r\n        this.transform.updateTransform(this.parent.transform);\r\n\r\n        // TODO: check render flags, how to process stuff here\r\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\r\n\r\n        let child;\r\n        let next;\r\n\r\n        for (child = this._firstChild; child; child = next)\r\n        {\r\n            next = child.nextChild;\r\n\r\n            if (child.visible)\r\n            {\r\n                child.updateTransform();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recalculates the bounds of the container.\r\n     * Copied from and overrides PixiJS v5 method (v4 method is identical)\r\n     */\r\n    calculateBounds(): void\r\n    {\r\n        this._bounds.clear();\r\n\r\n        this._calculateBounds();\r\n\r\n        let child;\r\n        let next;\r\n\r\n        for (child = this._firstChild; child; child = next)\r\n        {\r\n            next = child.nextChild;\r\n\r\n            if (!child.visible || !child.renderable)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            child.calculateBounds();\r\n\r\n            // TODO: filter+mask, need to mask both somehow\r\n            if (child._mask)\r\n            {\r\n                const maskObject = ((child._mask as MaskData).maskObject || child._mask) as Container;\r\n\r\n                maskObject.calculateBounds();\r\n                this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\r\n            }\r\n            else if (child.filterArea)\r\n            {\r\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\r\n            }\r\n            else\r\n            {\r\n                this._bounds.addBounds(child._bounds);\r\n            }\r\n        }\r\n\r\n        this._bounds.updateID = this._boundsID;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the local bounds of the displayObject as a rectangle object. Copied from and overrides PixiJS v5 method\r\n     */\r\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\r\n    {\r\n        // skip Container's getLocalBounds, go directly to DisplayObject\r\n        const result = DisplayObject.prototype.getLocalBounds.call(this, rect);\r\n\r\n        if (!skipChildrenUpdate)\r\n        {\r\n            let child;\r\n            let next;\r\n\r\n            for (child = this._firstChild; child; child = next)\r\n            {\r\n                next = child.nextChild;\r\n\r\n                if (child.visible)\r\n                {\r\n                    child.updateTransform();\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Renders the object using the WebGL renderer. Copied from and overrides PixiJS v5 method\r\n     */\r\n    render(renderer: Renderer): void\r\n    {\r\n        // if the object is not visible or the alpha is 0 then no need to render this element\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // do a quick check to see if this element has a mask or a filter.\r\n        if (this._mask || (this.filters && this.filters.length))\r\n        {\r\n            this.renderAdvanced(renderer);\r\n        }\r\n        else\r\n        {\r\n            this._render(renderer);\r\n\r\n            let child;\r\n            let next;\r\n\r\n            // simple render children!\r\n            for (child = this._firstChild; child; child = next)\r\n            {\r\n                next = child.nextChild;\r\n                child.render(renderer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the object using the WebGL renderer and advanced features. Copied from and overrides PixiJS v5 method\r\n     */\r\n    protected renderAdvanced(renderer: Renderer): void\r\n    {\r\n        renderer.batch.flush();\r\n\r\n        const filters = this.filters;\r\n        const mask = this._mask;\r\n\r\n        // _enabledFilters note: As of development, _enabledFilters is not documented in pixi.js\r\n        // types but is in code of current release (5.2.4).\r\n\r\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\r\n        if (filters)\r\n        {\r\n            if (!this._enabledFilters)\r\n            {\r\n                this._enabledFilters = [];\r\n            }\r\n\r\n            this._enabledFilters.length = 0;\r\n\r\n            for (let i = 0; i < filters.length; i++)\r\n            {\r\n                if (filters[i].enabled)\r\n                {\r\n                    this._enabledFilters.push(filters[i]);\r\n                }\r\n            }\r\n\r\n            if (this._enabledFilters.length)\r\n            {\r\n                renderer.filter.push(this, this._enabledFilters);\r\n            }\r\n        }\r\n\r\n        if (mask)\r\n        {\r\n            renderer.mask.push(this, this._mask);\r\n        }\r\n\r\n        // add this object to the batch, only rendered if it has a texture.\r\n        this._render(renderer);\r\n\r\n        let child;\r\n        let next;\r\n\r\n        // now loop through the children and make sure they get rendered\r\n        for (child = this._firstChild; child; child = next)\r\n        {\r\n            next = child.nextChild;\r\n            child.render(renderer);\r\n        }\r\n\r\n        renderer.batch.flush();\r\n\r\n        if (mask)\r\n        {\r\n            renderer.mask.pop(this);\r\n        }\r\n\r\n        if (filters && this._enabledFilters && this._enabledFilters.length)\r\n        {\r\n            renderer.filter.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the object using the Canvas renderer. Copied from and overrides PixiJS Canvas mixin in V5 and V6.\r\n     */\r\n    renderCanvas(renderer: any): void\r\n    {\r\n        // if not visible or the alpha is 0 then no need to render this\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this._mask)\r\n        {\r\n            renderer.maskManager.pushMask(this._mask);\r\n        }\r\n\r\n        (this as any)._renderCanvas(renderer);\r\n\r\n        let child;\r\n        let next;\r\n\r\n        for (child = this._firstChild; child; child = next)\r\n        {\r\n            next = child.nextChild;\r\n            (child as any).renderCanvas(renderer);\r\n        }\r\n\r\n        if (this._mask)\r\n        {\r\n            renderer.maskManager.popMask(renderer);\r\n        }\r\n    }\r\n}\r\n"]}